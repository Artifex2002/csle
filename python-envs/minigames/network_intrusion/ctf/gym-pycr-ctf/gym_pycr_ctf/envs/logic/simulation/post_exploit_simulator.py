from typing import Tuple
from gym_pycr_ctf.dao.network.env_state import EnvState
from gym_pycr_ctf.dao.network.env_config import EnvConfig
from gym_pycr_ctf.dao.action.attacker.attacker_action import AttackerAction
from gym_pycr_ctf.envs.logic.simulation.simulator_util import SimulatorUtil
from gym_pycr_ctf.dao.observation.attacker_machine_observation_state import AttackerMachineObservationState
from gym_pycr_ctf.envs.logic.common.env_dynamics_util import EnvDynamicsUtil
import gym_pycr_ctf.constants.constants as constants

class PostExploitSimulator:
    """
    Class that implements functionality for simulating post-exploit actions
    """

    @staticmethod
    def simulate_ssh_login(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates an action of logging in to a SSH server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config,
                                                                      service_name=constants.SSH.SERVICE_NAME)
        return s_prime, reward, False

    @staticmethod
    def simulate_ftp_login(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config,
                                                                      service_name=constants.FTP.SERVICE_NAME)
        return s_prime, reward, False

    @staticmethod
    def simulate_telnet_login(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config,
                                                                      service_name=constants.TELNET.SERVICE_NAME)
        return s_prime, reward, False

    @staticmethod
    def simulate_bash_find_flag(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates the action of searching the file system for a flag

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        total_new_ports, total_new_os, total_new_vuln, total_new_machines, total_new_shell_access, \
        total_new_root, total_new_flag_pts, total_new_root, total_new_osvdb_vuln_found, total_new_logged_in, \
        total_new_tools_installed, total_new_backdoors_installed = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        new_obs_machines = []
        for node in env_config.network_conf.nodes:
            new_m_obs = None
            logged_in = False
            logged_in_m = None
            for o_m in s.attacker_obs_state.machines:
                if o_m.ip == node.ip:
                    logged_in = o_m.logged_in
                    logged_in_m = o_m

            if logged_in:
                new_m_obs = AttackerMachineObservationState(ip=node.ip)
                for flag in node.flags:
                    if flag.requires_root and logged_in_m.root:
                        new_m_obs.flags_found.add(flag)
                    elif not flag.requires_root:
                        new_m_obs.flags_found.add(flag)
                new_m_obs.filesystem_searched = True
                new_obs_machines.append(new_m_obs)
        new_obs_machines, total_new_ports, total_new_os, total_new_vuln, total_new_machines, \
        total_new_shell_access, total_new_flag_pts, total_new_root, total_new_osvdb_vuln_found, \
        total_new_logged_in, total_new_tools_installed, total_new_backdoors_installed = \
            EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_obs_machines,
                                                   env_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = new_obs_machines
        reward = EnvDynamicsUtil.reward_function(num_new_ports_found=total_new_ports,
                                                 num_new_os_found=total_new_os,
                                                 num_new_cve_vuln_found=total_new_vuln,
                                                 num_new_machines=total_new_machines,
                                                 num_new_shell_access=total_new_shell_access,
                                                 num_new_root=total_new_root,
                                                 num_new_flag_pts=total_new_flag_pts,
                                                 num_new_osvdb_vuln_found=total_new_osvdb_vuln_found,
                                                 num_new_logged_in=total_new_logged_in,
                                                 num_new_tools_installed=total_new_tools_installed,
                                                 num_new_backdoors_installed=total_new_backdoors_installed,
                                                 cost=a.cost, env_config=env_config,
                                                 alerts=a.alerts, action=a
                                                 )
        s_prime.attacker_obs_state.catched_flags += total_new_flag_pts
        done = EnvDynamicsUtil.is_all_flags_collected(s_prime, env_config)
        if done:
            reward = reward + env_config.attacker_all_flags_reward
        else:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
        s_prime.attacker_obs_state.all_flags = done
        return s_prime, reward, done


    @staticmethod
    def execute_install_tools(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates the action of install tools needed to install backdoors on a compromised machine

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        new_machines = []

        for machine in s.attacker_obs_state.machines:
            if machine.logged_in:
                m = machine.copy()
                m.tools_installed = True
                new_machines.append(m)

        new_obs_machines, total_new_ports, total_new_os, total_new_vuln, total_new_machines, \
        total_new_shell_access, total_new_flag_pts, total_new_root, total_new_osvdb_vuln_found, \
        total_new_logged_in, total_new_tools_installed, total_new_backdoors_installed = \
            EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_machines,
                                                   env_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = new_obs_machines
        reward = EnvDynamicsUtil.reward_function(num_new_ports_found=total_new_ports,
                                                 num_new_os_found=total_new_os,
                                                 num_new_cve_vuln_found=total_new_vuln,
                                                 num_new_machines=total_new_machines,
                                                 num_new_shell_access=total_new_shell_access,
                                                 num_new_root=total_new_root,
                                                 num_new_flag_pts=total_new_flag_pts,
                                                 num_new_osvdb_vuln_found=total_new_osvdb_vuln_found,
                                                 num_new_logged_in=total_new_logged_in,
                                                 num_new_tools_installed=total_new_tools_installed,
                                                 num_new_backdoors_installed=total_new_backdoors_installed,
                                                 cost=a.cost, env_config=env_config,
                                                 alerts=a.alerts, action=a)
        return s_prime, reward, False


    @staticmethod
    def execute_ssh_backdoor(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Simulates the action of installing a SSH backdoor on a machine

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        new_machines = []

        for machine in s.attacker_obs_state.machines:
            if machine.logged_in and machine.tools_installed:
                m = machine.copy()
                m.backdoor_installed = True
                m.backdoor_tried = True
                new_machines.append(m)

        new_obs_machines, total_new_ports, total_new_os, total_new_vuln, total_new_machines, \
        total_new_shell_access, total_new_flag_pts, total_new_root, total_new_osvdb_vuln_found, \
        total_new_logged_in, total_new_tools_installed, total_new_backdoors_installed = \
            EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_machines,
                                                   env_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = new_obs_machines
        reward = EnvDynamicsUtil.reward_function(num_new_ports_found=total_new_ports,
                                                 num_new_os_found=total_new_os,
                                                 num_new_cve_vuln_found=total_new_vuln,
                                                 num_new_machines=total_new_machines,
                                                 num_new_shell_access=total_new_shell_access,
                                                 num_new_root=total_new_root,
                                                 num_new_flag_pts=total_new_flag_pts,
                                                 num_new_osvdb_vuln_found=total_new_osvdb_vuln_found,
                                                 num_new_logged_in=total_new_logged_in,
                                                 num_new_tools_installed=total_new_tools_installed,
                                                 num_new_backdoors_installed=total_new_backdoors_installed,
                                                 cost=a.cost, env_config=env_config,
                                                 alerts=a.alerts, action=a)
        return s_prime, reward, False