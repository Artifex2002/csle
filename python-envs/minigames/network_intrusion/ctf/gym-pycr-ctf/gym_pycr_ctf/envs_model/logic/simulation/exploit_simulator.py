from typing import Tuple
from gym_pycr_ctf.dao.network.env_state import EnvState
from gym_pycr_ctf.dao.network.env_config import EnvConfig
from gym_pycr_ctf.dao.action.attacker.attacker_action import AttackerAction
from gym_pycr_ctf.envs_model.logic.simulation.util.simulator_util import SimulatorUtil
from gym_pycr_ctf.envs_model.logic.simulation.util.exploit_simulator_util import ExploitSimulatorUtil

class ExploitSimulator:
    """
    Class that implements functionality for simulating exploit actions
    """

    @staticmethod
    def simulate_telnet_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a telnet dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_ssh_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a ssh dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_ftp_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a ftp dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cassandra_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a cassandra dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_irc_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a IRC dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_mongo_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a mongodb dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_mysql_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a mysql dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_smtp_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a SMTP dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_postgres_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a postgres dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = ExploitSimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
        if done:
            reward = d_reward
        s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done