from typing import Union
from gym_pycr_pwcrack.dao.network.env_state import EnvState
from gym_pycr_pwcrack.dao.network.env_config import EnvConfig
from gym_pycr_pwcrack.dao.action.action import Action
from gym_pycr_pwcrack.envs.logic.simulation.simulator_util import SimulatorUtil
from gym_pycr_pwcrack.dao.observation.machine_observation_state import MachineObservationState

class PostExploitSimulator:

    @staticmethod
    def simulate_ssh_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Simulates an action of logging in to a SSH server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config, service_name="ssh")
        return s_prime, reward, False

    @staticmethod
    def simulate_ftp_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config, service_name="ftp")
        return s_prime, reward, False

    @staticmethod
    def simulate_telnet_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_service_login_helper(s=s, a=a, env_config=env_config,
                                                                      service_name="telnet")
        return s_prime, reward, False

    @staticmethod
    def simulate_bash_find_flag(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        total_new_ports, total_new_os, total_new_vuln, total_new_machines, total_new_shell_access, \
        total_new_root, total_new_flag_pts = 0, 0, 0, 0, 0, 0, 0
        new_m_obs = None
        for node in env_config.network_conf.nodes:
            logged_in = False
            logged_in_m = None
            for o_m in s.obs_state.machines:
                if o_m.ip == node.ip:
                    logged_in = o_m.logged_in
                    logged_in_m = o_m

            if logged_in:
                new_m_obs = MachineObservationState(ip=node.ip)
                for flag in node.flags:
                    if flag.requires_root and logged_in_m.root:
                        new_m_obs.flags_found.add(flag)
                    elif not flag.requires_root:
                        new_m_obs.flags_found.add(flag)
        if new_m_obs is None:
            new_machines_obs = s.obs_state.machines
        else:
            new_machines_obs = []
            for o_m in s.obs_state.machines:
                # Machine was already known, merge state
                if o_m.ip == new_m_obs.ip:
                    merged_machine_obs, num_new_ports_found, num_new_os_found, num_new_vuln_found, new_shell_access, \
                    new_root, new_flag_pts = SimulatorUtil.merge_new_machine_obs_with_old_machine_obs(o_m, new_m_obs)
                    new_machines_obs.append(merged_machine_obs)
                    total_new_vuln += num_new_vuln_found
                    total_new_shell_access += new_shell_access
                    total_new_ports += num_new_ports_found
                    total_new_os += num_new_os_found
                    total_new_root += new_root
                    total_new_flag_pts += new_flag_pts
                else:
                    new_machines_obs.append(o_m)

        s_prime = s
        s_prime.obs_state.machines = new_machines_obs
        reward = SimulatorUtil.reward_function(num_new_ports_found=total_new_ports,
                                               num_new_os_found=total_new_os,
                                               num_new_vuln_found=total_new_vuln,
                                               num_new_machines=total_new_machines,
                                               num_new_shell_access=total_new_shell_access,
                                               num_new_root=total_new_root,
                                               num_new_flag_pts=total_new_flag_pts)
        done = PostExploitSimulator.is_all_flags_collected(s_prime, env_config)
        return s_prime, reward, done


    @staticmethod
    def is_all_flags_collected(s : EnvState, env_config : EnvConfig) -> bool:
        total_flags = set()
        for node in env_config.network_conf.nodes:
            for flag in node.flags:
                total_flags.add(flag)
        found_flags = set()
        for node in s.obs_state.machines:
            found_flags = found_flags.union(node.flags_found)

        return total_flags == found_flags