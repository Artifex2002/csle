from typing import Union
from gym_pycr_pwcrack.dao.network.env_state import EnvState
from gym_pycr_pwcrack.dao.network.env_config import EnvConfig
from gym_pycr_pwcrack.dao.action.action import Action
from gym_pycr_pwcrack.envs.logic.simulation.simulator_util import SimulatorUtil

class ExploitSimulator:

    @staticmethod
    def simulate_telnet_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[
        EnvState, int, bool]:
        """
        Performs a telnet dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_ssh_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Performs a ssh dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_ftp_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Performs a ftp dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_cassandra_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[
        EnvState, int, bool]:
        """
        Performs a cassandra dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_irc_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Performs a IRC dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_mongo_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[
        EnvState, int, bool]:
        """
        Performs a mongodb dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_mysql_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[
        EnvState, int, bool]:
        """
        Performs a mysql dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_smtp_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Performs a SMTP dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False

    @staticmethod
    def simulate_postgres_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Union[
        EnvState, int, bool]:
        """
        Performs a postgres dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward = SimulatorUtil.simulate_dictionary_pw_exploit_same_user(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        return s_prime, reward, False