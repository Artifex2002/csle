from typing import Union
from gym_pycr_pwcrack.dao.network.env_state import EnvState
from gym_pycr_pwcrack.dao.network.env_config import EnvConfig
from gym_pycr_pwcrack.dao.action.action import Action
from gym_pycr_pwcrack.envs.logic.cluster.cluster_util import ClusterUtil
from gym_pycr_pwcrack.envs.logic.common.env_dynamics_util import EnvDynamicsUtil
import gym_pycr_pwcrack.constants.constants as constants

class PostExploitMiddleware:
    """
    Class that implements functionality for executing post-exploits actions on the cluster
    """

    @staticmethod
    def execute_ssh_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a SSH login on the cluster

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_ssh_connection_is_alive,
            service_name=constants.SSH.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_ftp_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a FTP login on the server

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_ftp_connection_is_alive,
            service_name=constants.FTP.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_telnet_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a telnet login on the server

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_telnet_connection_is_alive,
            service_name=constants.TELNET.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_bash_find_flag(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Searches the file system for all servers where the agent is currently logged in to find flags

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        print("searching for flags")
        for machine in s.obs_state.machines:
            if machine.logged_in:
                # Start with ssh connections
                ssh_connections_sorted_by_root = sorted(machine.ssh_connections, key=lambda x: x.root, reverse=True)
                for c in ssh_connections_sorted_by_root:
                    outdata, errdata, total_time = ClusterUtil.execute_ssh_cmd(cmd=a.cmd, conn=c.conn)
                    print("outdata:{}".format(outdata))
                    print("errdata:{}".format(errdata))

                # If no flag found, try telnet connections
                telnet_connections_sorted_by_root = sorted(machine.telnet_connections, key=lambda x: x.root,
                                                           reverse=True)
                for c in telnet_connections_sorted_by_root:
                    pass

                # If no flag found, try ftp connections
                ftp_connections_sorted_by_root = sorted(machine.ftp_connections, key=lambda x: x.root, reverse=True)
                for c in ftp_connections_sorted_by_root:
                    pass

        return s, 0, False