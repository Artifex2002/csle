from typing import Union
from gym_pycr_pwcrack.dao.network.env_state import EnvState
from gym_pycr_pwcrack.dao.network.env_config import EnvConfig
from gym_pycr_pwcrack.dao.action.action import Action
from gym_pycr_pwcrack.envs.logic.cluster.cluster_util import ClusterUtil
from gym_pycr_pwcrack.envs.logic.common.env_dynamics_util import EnvDynamicsUtil
import gym_pycr_pwcrack.constants.constants as constants
from gym_pycr_pwcrack.dao.observation.machine_observation_state import MachineObservationState

class PostExploitMiddleware:
    """
    Class that implements functionality for executing post-exploits actions on the cluster
    """

    @staticmethod
    def execute_ssh_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a SSH login on the cluster

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_ssh_connection_is_alive,
            service_name=constants.SSH.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_ftp_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a FTP login on the server

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_ftp_connection_is_alive,
            service_name=constants.FTP.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_telnet_login(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Executes a telnet login on the server

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.login_service_helper(
            s=s, a=a, alive_check=EnvDynamicsUtil.check_if_telnet_connection_is_alive,
            service_name=constants.TELNET.SERVICE_NAME, env_config=env_config)
        return s_prime, reward, done

    @staticmethod
    def execute_bash_find_flag(s: EnvState, a: Action, env_config: EnvConfig) -> Union[EnvState, int, bool]:
        """
        Searches the file system for all servers where the agent is currently logged in to find flags

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        print("searching for flags")
        new_machines_obs = []
        for machine in s.obs_state.machines:
            if machine.logged_in:
                new_m_obs = MachineObservationState(ip=machine.ip)
                key = (machine.ip, machine.root)
                if env_config.use_file_system_cache \
                        and key in env_config.filesystem_scan_cache.cache:
                    new_m_obs = env_config.filesystem_scan_cache.get(key)
                    print("cache hit fs")
                    break

                flag_found = False
                root_scan = False
                # Start with ssh connections
                ssh_connections_sorted_by_root = sorted(machine.ssh_connections, key=lambda x: x.root, reverse=True)
                for c in ssh_connections_sorted_by_root:
                    outdata, errdata, total_time = ClusterUtil.execute_ssh_cmd(cmd=a.cmd[0], conn=c.conn)
                    outdata_str = outdata.decode()
                    flag_paths = outdata_str.split("\n")
                    for fp in flag_paths:
                        fp = fp.replace(".txt", "")
                        if (machine.ip, fp) in env_config.flag_lookup:
                            new_m_obs.flags_found.add(env_config.flag_lookup[(machine.ip, fp)])
                    new_machines_obs.append(new_m_obs)
                    if c.root:
                        root_scan = True
                    break
                if flag_found and root_scan:
                    continue
                # If no flag found, try telnet connections
                telnet_connections_sorted_by_root = sorted(machine.telnet_connections, key=lambda x: x.root,
                                                           reverse=True)
                for c in telnet_connections_sorted_by_root:
                    pass

                # If no flag found, try ftp connections
                ftp_connections_sorted_by_root = sorted(machine.ftp_connections, key=lambda x: x.root, reverse=True)
                for c in ftp_connections_sorted_by_root:
                    pass

                if env_config.use_file_system_cache:
                    env_config.filesystem_scan_cache.add(key, new_m_obs)

        new_machines_obs, total_new_ports, total_new_os, total_new_vuln, total_new_machines, \
        total_new_shell_access, total_new_flag_pts, total_new_root = \
            EnvDynamicsUtil.merge_new_obs_with_old(s.obs_state.machines, new_machines_obs)
        s_prime = s
        s_prime.obs_state.machines = new_machines_obs
        # Use measured cost
        if env_config.action_costs.exists(action_id=a.id, ip=a.ip):
            a.cost = env_config.action_costs.get_cost(action_id=a.id, ip=a.ip)
        reward = EnvDynamicsUtil.reward_function(num_new_ports_found=total_new_ports, num_new_os_found=total_new_os,
                                                 num_new_vuln_found=total_new_vuln,
                                                 num_new_machines=total_new_machines,
                                                 num_new_shell_access=total_new_shell_access,
                                                 num_new_root=total_new_root,
                                                 num_new_flag_pts=total_new_flag_pts,
                                                 cost=a.cost)

        return s_prime, reward, False