from typing import Tuple
from gym_pycr_pwcrack.dao.network.env_state import EnvState
from gym_pycr_pwcrack.dao.network.env_config import EnvConfig
from gym_pycr_pwcrack.dao.action.action import Action
from gym_pycr_pwcrack.envs.logic.cluster.cluster_util import ClusterUtil

class ExploitMiddleware:
    """
    Class that implements functionality for executing exploits actions on the cluster
    """

    @staticmethod
    def execute_telnet_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a Telnet Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.telnet_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_ssh_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a SSH Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.ssh_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_ftp_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a FTP Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.ftp_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_cassandra_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a Cassandra Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.cassandra_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_irc_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a IRC Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.irc_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_mongo_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a Mongo Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.mongo_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_mysql_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a MySQL Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.mysql_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_smtp_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a SMTP Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.smtp_brute_tried = True
        return s_prime, reward, done

    @staticmethod
    def execute_postgres_same_user_dictionary(s: EnvState, a: Action, env_config: EnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a Postgres Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ClusterUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        for m in s_prime.obs_state.machines:
            if m.ip == a.ip or a.subnet:
                m.postgres_brute_tried = True
        return s_prime, reward, done
