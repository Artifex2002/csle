from typing import List
from pycr_common.dao.network.transport_protocol import TransportProtocol
from pycr_common.dao.network.vulnerability import Vulnerability
from pycr_common.dao.network.credential import Credential
from pycr_common.dao.network.network_service import NetworkService


class VulnerabilityObservationState:
    """
    A DTO representing an observed vulnerability
    """

    def __init__(self, name : str, port : int, protocol: TransportProtocol, cvss : float, osvdbid: int = None,
                 description : str = None, credentials: List[Credential] = None, service: str = ""):
        """
        Initializes the DTO

        :param name: the name of the vulnerability
        :param port: the port of the vulnerability
        :param protocol: the protocol of the vulnerability
        :param cvss: the CVSS of the vulnerability
        :param osvdbid: the OSVDBID of the vulnerability
        :param description: the description of the vulnerability
        :param credentials: the credentials of the vulnerability
        :param service: the service of the vulnerability
        """
        self.name = name
        self.port = port
        self.protocol = protocol
        self.cvss = cvss
        self.osvdb_id = osvdbid
        self.description = description
        self.credentials = credentials
        self.service = service
        if service is None or service == "":
            for cr in self.credentials:
                if cr.service is not None and cr.service != "":
                    self.service = cr.service

    def __str__(self):
        """
        :return: a string representation of the observed vulnerability
        """
        return "name:{}, port:{}, protocol:{}, cvss:{}, osvdb_id:{}, desc:{}, service:{}, credentials:{}".format(
            self.name, self.port, self.protocol, self.cvss, self.osvdb_id, self.description, self.service,
            list(map(lambda x: str(x), self.credentials)))

    def to_vulnerability(self) -> Vulnerability:
        """
        Converts the object into a vulnerability representation

        :return: A vulnerability representation of the object
        """
        vuln = Vulnerability(name=self.name, port=self.port, protocol= self.protocol, cvss=self.cvss,
                             cve="", credentials=self.credentials, service=self.service)
        return vuln

    def to_network_services(self) -> NetworkService:
        """
        Converts the object into a network service representation

        :return: the network service representation
        """
        services = [NetworkService(protocol=self.protocol, port=self.port, name=self.service, credentials=self.credentials)]
        for cr in self.credentials:
            new_service = True
            for s in services:
                if s.name == cr.service:
                    new_service = False
            if new_service:
                services.append(NetworkService.from_credential(cr))
        return services