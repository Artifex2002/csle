from typing import List
from csle_common.dao.container_config.vulnerability_type import VulnType
from csle_common.dao.network.transport_protocol import TransportProtocol
from csle_common.dao.network.credential import Credential


class NodeVulnerabilityConfig:
    """
    A DTO object representing a vulnerability of a container in the emulation environment
    """

    def __init__(self, ip: str, vuln_type: VulnType, name: str, port : int,
                 protocol: TransportProtocol, credentials : List[Credential] = None,
                 cvss : float = 2.0,
                 cve: str = None, service: str = None, root: bool = False):
        """
        Initializes the DTO

        :param ip: the ip of the node
        :param vuln_type: the vulnerability type
        :param name: the name of the vulnerability
        :param port: the port of the service of the vulnerability
        :param protocol: the protocol of the service of the vulnerability
        :param credentials: the credentials of the vulnerability
        :param cvss: the CVSS of the vulnerability
        :param cve: the CVE of the vulnerability
        :param service: the service of the vulnerability
        :param root: if the vulnerability gives root or not
        """
        self.ip = ip
        self.vuln_type = vuln_type
        self.name = name
        self.port = port
        self.protocol = protocol
        self.credentials = credentials
        self.cvss = cvss
        self.cve = cve
        self.service = service
        self.root = root

    def to_dict(self) -> dict:
        """
        :return: a dict representation of the object
        """
        d = {}
        d["ip"] = self.ip
        d["vuln_type"] = self.vuln_type.name
        d["name"] = self.name
        d["port"] = self.port
        d["protocol"] = self.protocol.name
        d["credentials"] = list(map(lambda x: x.to_dict(), self.credentials))
        d["root"] = self.root
        return d

    @staticmethod
    def from_dict(d) -> "NodeVulnerabilityConfig":
        """
        Convert a dict representation to a DTO representation

        :return: a dto representation of the object
        """
        dto = NodeVulnerabilityConfig(ip=d["ip"], vuln_type=VulnType.from_str(d["vuln_type"]),
                                      name = d["name"], port = d["port"],
                                      protocol=TransportProtocol._from_str(d["protocol"]),
                                      credentials=list(map(lambda x: Credential.from_dict(x), d["credentials"])),
                                      root=d["root"])
        return dto

    def __str__(self) -> str:
        """
        :return: a string representation of the object
        """
        return f"node_internal_ip:{self.ip}, vuln_type:{self.vuln_type}, name:{self.name}, port:{self.port}, " \
               f"protocol: {self.protocol}, credentials: {list(map(lambda x: str(x), self.credentials))}, " \
               f"cvss: {self.cvss}, cve: {self.cve}, service: {self.service}, root:{self.root}"