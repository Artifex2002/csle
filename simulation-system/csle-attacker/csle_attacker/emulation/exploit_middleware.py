from typing import Tuple
from csle_common.dao.network.emulation_env_state import EmulationEnvState
from csle_common.dao.network.emulation_env_agent_config import EmulationEnvAgentConfig
from csle_common.dao.action.attacker.attacker_action import AttackerAction
from csle_common.dao.observation.attacker.attacker_machine_observation_state import AttackerMachineObservationState
from csle_common.envs_model.util.env_dynamics_util import EnvDynamicsUtil
from csle_attacker.emulation.util.nmap_util import NmapUtil
from csle_attacker.emulation.util.exploit_util import ExploitUtil


class ExploitMiddleware:
    """
    Class that implements functionality for executing exploits actions on the emulation
    """

    @staticmethod
    def execute_telnet_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a Telnet Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_ssh_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a SSH Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_ftp_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a FTP Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_cassandra_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a Cassandra Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_irc_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a IRC Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_mongo_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a Mongo Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_mysql_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a MySQL Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_smtp_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a SMTP Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime, reward, done = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_postgres_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a Postgres Dictionary Password Attack action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime, reward, done = NmapUtil.nmap_scan_action_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_sambacry(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a Sambacry Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitUtil.sambacry_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_shellshock(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a ShellShock Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitUtil.shellshock_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_dvwa_sql_injection(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a DVWA SQL Injection Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitUtil.dvwa_sql_injection_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_cve_2015_3306_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-3306 Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitUtil.cve_2015_3306_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_cve_2015_1427_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-1427 Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitUtil.cve_2015_1427_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_cve_2016_10033_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2016-10033 Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitUtil.cve_2016_10033_helper(s=s, a=a, env_config=env_config)
        return s_prime

    @staticmethod
    def execute_cve_2010_0426_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2010-0426 Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        new_machines_obs = []
        total_cost = 0
        for machine in s.attacker_obs_state.machines:
            for ip in machine.ips:
                try:
                    if ip in a.ips and machine.logged_in and not machine.root:
                        new_m_obs = AttackerMachineObservationState(ips=machine.ips)
                        new_m_obs.cve_2010_0426_tried = True
                        # Try to escalate privileges using existing connections
                        new_m_obs, m_cost, exploit_successful, root_credential, service = \
                            ExploitUtil.cve_2010_0426_helper(s=s, a=a, env_config=env_config,
                                                             machine=machine, result=new_m_obs)
                        new_machines_obs.append(new_m_obs.copy())

                        # Total cost update
                        total_cost += m_cost
                except Exception as e:
                    pass

        net_outcome = EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_machines_obs,
                                                             emulation_env_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = net_outcome.attacker_machine_observations
        return s_prime

    @staticmethod
    def execute_cve_2015_5602_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-5602 Exploit action

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        new_machines_obs = []
        total_cost = 0
        for machine in s.attacker_obs_state.machines:
            for ip in machine.ips:
                try:
                    if ip in a.ips and machine.logged_in and not machine.root:
                        new_m_obs = AttackerMachineObservationState(ips=machine.ips)
                        new_m_obs.cve_2015_5602_tried = True
                        # Try to escalate privileges using existing connections
                        new_m_obs, m_cost, m_alerts, exploit_successful, root_credential, service = \
                            ExploitUtil.cve_2015_5602_helper(s=s, a=a, env_config=env_config, machine=machine,
                                                             result=new_m_obs)
                        new_machines_obs.append(new_m_obs.copy())
                        # Total cost update
                        total_cost += m_cost
                except Exception as e:
                    pass

        net_outcome = EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines,
                                                             new_machines_obs, emulation_env_config=env_config,
                                                             action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = net_outcome.attacker_machine_observations
        return s_prime
