import csle_common.constants.constants as constants
from csle_common.dao.network.emulation_env_state import EmulationEnvState
from csle_common.dao.network.emulation_env_agent_config import EmulationEnvAgentConfig
from csle_common.dao.action.attacker.attacker_action import AttackerAction
from csle_common.dao.observation.attacker.attacker_machine_observation_state import AttackerMachineObservationState
from csle_common.envs_model.util.env_dynamics_util import EnvDynamicsUtil
from csle_attacker.simulation.util.shell_simulator_util import ShellSimulatorUtil


class PostExploitSimulator:
    """
    Class that implements functionality for simulating post-exploit actions
    """

    @staticmethod
    def simulate_ssh_login(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) \
            -> EmulationEnvState:
        """
        Simulates an action of logging in to a SSH server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ShellSimulatorUtil.simulate_service_login_helper(
            s=s, a=a, env_config=env_config, service_name=constants.SSH.SERVICE_NAME)
        return s_prime

    @staticmethod
    def simulate_ftp_login(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ShellSimulatorUtil.simulate_service_login_helper(
            s=s, a=a, env_config=env_config, service_name=constants.FTP.SERVICE_NAME)
        return s_prime

    @staticmethod
    def simulate_telnet_login(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) \
            -> EmulationEnvState:
        """
        Simulates an action of logging in to a FTP server

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime = ShellSimulatorUtil.simulate_service_login_helper(
            s=s, a=a, env_config=env_config, service_name=constants.TELNET.SERVICE_NAME)
        return s_prime

    @staticmethod
    def simulate_bash_find_flag(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Simulates the action of searching the file system for a flag

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        new_obs_machines = []
        for node in env_config.network_conf.nodes:
            new_m_obs = None
            logged_in = False
            logged_in_m = None
            for o_m in s.attacker_obs_state.machines:
                if o_m.ips == node.ips:
                    logged_in = o_m.logged_in
                    logged_in_m = o_m

            if logged_in:
                new_m_obs = AttackerMachineObservationState(ips=node.ips)
                for flag in node.flags:
                    if flag.requires_root and logged_in_m.root:
                        new_m_obs.flags_found.add(flag)
                    elif not flag.requires_root:
                        new_m_obs.flags_found.add(flag)
                new_m_obs.filesystem_searched = True
                new_obs_machines.append(new_m_obs)
        network_outcome = EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_obs_machines,
                                                                 emulation_env_agent_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = network_outcome.attacker_machine_observations
        s_prime.attacker_obs_state.catched_flags += network_outcome.total_new_flag_pts
        return s_prime


    @staticmethod
    def execute_install_tools(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Simulates the action of install tools needed to install backdoors on a compromised machine

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        new_machines = []

        for machine in s.attacker_obs_state.machines:
            if machine.logged_in and machine.root:
                m = machine.copy()
                m.tools_installed = True
                new_machines.append(m)

        net_outcome = EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_machines,
                                                             emulation_env_agent_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = net_outcome.attacker_machine_observations
        return s_prime


    @staticmethod
    def execute_ssh_backdoor(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Simulates the action of installing a SSH backdoor on a machine

        :param s: the environment state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        new_machines = []

        for machine in s.attacker_obs_state.machines:
            if machine.logged_in and machine.tools_installed:
                m = machine.copy()
                m.backdoor_installed = True
                m.backdoor_tried = True
                new_machines.append(m)

        net_outcome = EnvDynamicsUtil.merge_new_obs_with_old(s.attacker_obs_state.machines, new_machines,
                                                             emulation_env_agent_config=env_config, action=a)
        s_prime = s
        s_prime.attacker_obs_state.machines = net_outcome.attacker_machine_observations

        return s_prime