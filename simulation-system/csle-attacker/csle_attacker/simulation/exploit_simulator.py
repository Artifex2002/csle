from csle_common.dao.network.emulation_env_state import EmulationEnvState
from csle_common.dao.network.emulation_env_agent_config import EmulationEnvAgentConfig
from csle_common.dao.action.attacker.attacker_action import AttackerAction
from csle_attacker.simulation.util.exploit_simulator_util import ExploitSimulatorUtil


class ExploitSimulator:
    """
    Class that implements functionality for simulating exploit actions
    """

    @staticmethod
    def simulate_telnet_same_user_dictionary(s: EmulationEnvState, a: AttackerAction,
                                             env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a telnet dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime= ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_ssh_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a ssh dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_ftp_same_user_dictionary(s: EmulationEnvState, a: AttackerAction,
                                          env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a ftp dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cassandra_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a cassandra dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_irc_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a IRC dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_mongo_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a mongodb dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_mysql_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a mysql dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(s=s, a=a, env_config=env_config,
                                                                             vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_smtp_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a SMTP dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(s=s, a=a, env_config=env_config,
                                                               vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_postgres_same_user_dictionary(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a postgres dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(s=s, a=a,
                                                               env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_sambacry_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a sambacry exploit on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_shellshock_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a shellshock exploit on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(s=s, a=a,
                                                               env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_sql_injection_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a SQL injection attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cve_2015_3306_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-3306 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cve_2015_1427_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-1427 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cve_2016_10033_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2016-10033 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cve_2010_0426_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2010-0426 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime

    @staticmethod
    def simulate_cve_2015_5602_exploit(s: EmulationEnvState, a: AttackerAction, env_config: EmulationEnvAgentConfig) -> EmulationEnvState:
        """
        Performs a CVE-2015-5602 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime
        """
        s_prime = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, vuln_name=a.vulnerability)
        return s_prime