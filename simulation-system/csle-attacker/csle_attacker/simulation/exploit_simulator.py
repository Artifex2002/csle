from typing import Tuple
from csle_common.dao.network.env_state import EnvState
from csle_common.dao.network.env_config import CSLEEnvConfig
from csle_common.dao.action.attacker.attacker_action import AttackerAction
from csle_attacker.simulation.util.simulator_util import SimulatorUtil
from csle_attacker.simulation.util.exploit_simulator_util import ExploitSimulatorUtil


class ExploitSimulator:
    """
    Class that implements functionality for simulating exploit actions
    """

    @staticmethod
    def simulate_telnet_same_user_dictionary(s: EnvState, a: AttackerAction,
                                             env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a telnet dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_ssh_same_user_dictionary(s: EnvState, a: AttackerAction,
                                          env_config: CSLEEnvConfig) -> Tuple[EnvState, float, bool]:
        """
        Performs a ssh dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_ftp_same_user_dictionary(s: EnvState, a: AttackerAction,
                                          env_config: CSLEEnvConfig) -> Tuple[EnvState, float, bool]:
        """
        Performs a ftp dictionary attack constrainted to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cassandra_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) \
            -> Tuple[EnvState, int, bool]:
        """
        Performs a cassandra dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_irc_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) \
            -> Tuple[EnvState, float, bool]:
        """
        Performs a IRC dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_mongo_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a mongodb dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_mysql_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a mysql dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_smtp_same_user_dictionary(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) \
            -> Tuple[EnvState, float, bool]:
        """
        Performs a SMTP dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_postgres_same_user_dictionary(s: EnvState, a: AttackerAction,
                                               env_config: CSLEEnvConfig) -> Tuple[EnvState, int, bool]:
        """
        Performs a postgres dictionary attack constrained to username-password combinations where username==password

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_sambacry_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a sambacry exploit on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=0.0, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_shellshock_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a shellshock exploit on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_sql_injection_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a SQL injection attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cve_2015_3306_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a CVE-2015-3306 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cve_2015_1427_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a CVE-2015-1427 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cve_2016_10033_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a CVE-2016-10033 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cve_2010_0426_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a CVE-2010-0426 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
        return s_prime, reward, done

    @staticmethod
    def simulate_cve_2015_5602_exploit(s: EnvState, a: AttackerAction, env_config: CSLEEnvConfig) -> Tuple[
        EnvState, int, bool]:
        """
        Performs a CVE-2015-5602 attack on a target host

        :param s: the current state
        :param a: the action to take
        :param env_config: the environment configuration
        :return: s_prime, reward, done
        """
        s_prime, reward, done = ExploitSimulatorUtil.simulate_exploit_helper(
            s=s, a=a, env_config=env_config, miss_p=env_config.telnet_dict_attack_miss_p, vuln_name=a.vulnerability)
        if not done:
            done, d_reward = SimulatorUtil.simulate_detection(a=a, env_config=env_config)
            if done:
                reward = d_reward
            s_prime.attacker_obs_state.detected = done
            return s_prime, reward, done