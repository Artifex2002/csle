syntax = "proto3";

// Interface exported by the server
service ClusterManager {
  rpc getNodeStatus(GetNodeStatusMsg) returns (NodeStatusDTO) {}
  rpc startPostgreSQL(StartPostgreSQLMsg) returns (ServiceStatusDTO) {}
  rpc startCAdvisor(StartCAdvisorMsg) returns (ServiceStatusDTO) {}
  rpc startNodeExporter(StartNodeExporterMsg) returns (ServiceStatusDTO) {}
  rpc startGrafana(StartGrafanaMsg) returns (ServiceStatusDTO) {}
  rpc startPrometheus(StartPrometheusMsg) returns (ServiceStatusDTO) {}
  rpc startPgAdmin(StartPgAdminMsg) returns (ServiceStatusDTO) {}
  rpc startNginx(StartNginxMsg) returns (ServiceStatusDTO) {}
  rpc startFlask(StartFlaskMsg) returns (ServiceStatusDTO) {}
  rpc startDockerStatsManager(StartDockerStatsManagerMsg) returns (ServiceStatusDTO) {}
  rpc startDockerStatsManagerThread(StartDockerStatsManagerThreadMsg) returns (ServiceStatusDTO) {}
  rpc startDockerEngine(StartDockerEngineMsg) returns (ServiceStatusDTO) {}
  rpc stopPostgreSQL(StopPostgreSQLMsg) returns (ServiceStatusDTO) {}
  rpc stopCAdvisor(StopCAdvisorMsg) returns (ServiceStatusDTO) {}
  rpc stopNodeExporter(StopNodeExporterMsg) returns (ServiceStatusDTO) {}
  rpc stopGrafana(StopGrafanaMsg) returns (ServiceStatusDTO) {}
  rpc stopPrometheus(StopPrometheusMsg) returns (ServiceStatusDTO) {}
  rpc stopPgAdmin(StopPgAdminMsg) returns (ServiceStatusDTO) {}
  rpc stopNginx(StopNginxMsg) returns (ServiceStatusDTO) {}
  rpc stopFlask(StopFlaskMsg) returns (ServiceStatusDTO) {}
  rpc stopDockerStatsManager(StopDockerStatsManagerMsg) returns (ServiceStatusDTO) {}
  rpc stopDockerEngine(StopDockerEngineMsg) returns (ServiceStatusDTO) {}
  rpc getCsleLogFiles(GetCsleLogFilesMsg) returns (LogsDTO) {}
  rpc getDockerStatsManagerLogs(GetDockerStatsManagerLogsMsg) returns (LogsDTO) {}
  rpc getPrometheusLogs(GetPrometheusLogsMsg) returns (LogsDTO) {}
  rpc getNodeExporterLogs(GetNodeExporterLogsMsg) returns (LogsDTO) {}
  rpc getCadvisorLogs(GetCAdvisorLogsMsg) returns (LogsDTO) {}
  rpc getPgAdminLogs(GetPgAdminLogsMsg) returns (LogsDTO) {}
  rpc getGrafanaLogs(GetGrafanaLogsMsg) returns (LogsDTO) {}
  rpc getNginxLogs(GetNginxLogsMsg) returns (LogsDTO) {}
  rpc getDockerLogs(GetDockerLogsMsg) returns (LogsDTO) {}
  rpc getPostrgreSQLLogs(GetPostgreSQLLogsMsg) returns (LogsDTO) {}
  rpc getFlaskLogs(GetFlaskLogsMsg) returns (LogsDTO) {}
  rpc getLogFile(GetLogFileMsg) returns (LogsDTO) {}
  rpc startContainersInExecution(StartContainersInExecutionMsg) returns (OperationOutcomeDTO) {}
  rpc attachContainersInExecutionToNetworks(AttachContainersToNetworksInExecutionMsg) returns (OperationOutcomeDTO) {}
  rpc installLibraries(InstallLibrariesMsg) returns (OperationOutcomeDTO) {}
  rpc applyKafkaConfig(ApplyKafkaConfigMsg) returns (OperationOutcomeDTO) {}
  rpc startSdnController(StartSdnControllerMsg) returns (OperationOutcomeDTO) {}
  rpc applyResourceConstraints(ApplyResouceConstraintsMsg) returns (OperationOutcomeDTO) {}
  rpc createOvsSwitches(CreateOvsSwitchesMsg) returns (OperationOutcomeDTO) {}
  rpc pingExecution(PingExecutionMsg) returns (OperationOutcomeDTO) {}
  rpc configureOvs(ConfigureOvsMsg) returns (OperationOutcomeDTO) {}
  rpc startSdnControllerMonitor(StartSdnControllerMonitorMsg) returns (OperationOutcomeDTO) {}
  rpc createUsers(CreateUsersMsg) returns (OperationOutcomeDTO) {}
  rpc createVulnerabilities(CreateVulnsMsg) returns (OperationOutcomeDTO) {}
  rpc createFlags(CreateFlagsMsg) returns (OperationOutcomeDTO) {}
  rpc createTopology(CreateTopologyMsg) returns (OperationOutcomeDTO) {}
  rpc startTrafficManagers(StartTrafficManagersMsg) returns (OperationOutcomeDTO) {}
  rpc startTrafficGenerators(StartTrafficGeneratorsMsg) returns (OperationOutcomeDTO) {}
  rpc startClientPopulation(StartClientPopulationMsg) returns (OperationOutcomeDTO) {}
  rpc startKafkaClientProducer(StartKafkaClientProducerMsg) returns (OperationOutcomeDTO) {}
  rpc stopKafkaClientProducer(StopKafkaClientProducerMsg) returns (OperationOutcomeDTO) {}
  rpc startSnortIdses(StartSnortIdsesMsg) returns (OperationOutcomeDTO) {}
  rpc startSnortIdsesMonitorThreads(StartSnortIdsesMonitorThreadsMsg) returns (OperationOutcomeDTO) {}
  rpc startOssecIdses(StartOSSECIdsesMsg) returns (OperationOutcomeDTO) {}
  rpc startOssecIdsesMonitorThreads(StartOSSECIdsesMonitorThreadsMsg) returns (OperationOutcomeDTO) {}
  rpc startElkStack(StartElkStackMsg) returns (OperationOutcomeDTO) {}
  rpc startHostManagers(StartHostManagersMsg) returns (OperationOutcomeDTO) {}
  rpc applyFileBeatsConfig(ApplyFileBeatConfigsMsg) returns (OperationOutcomeDTO) {}
  rpc applyPacketBeatsConfig(ApplyPacketBeatConfigsMsg) returns (OperationOutcomeDTO) {}
  rpc applyMetricBeatsConfig(ApplyMetricBeatConfigsMsg) returns (OperationOutcomeDTO) {}
  rpc applyHeartBeatsConfig(ApplyHeartBeatConfigsMsg) returns (OperationOutcomeDTO) {}
  rpc startFilebeats(StartFileBeatsMsg) returns (OperationOutcomeDTO) {}
  rpc startPacketbeats(StartPacketBeatsMsg) returns (OperationOutcomeDTO) {}
  rpc startMetricbeats(StartMetricBeatsMsg) returns (OperationOutcomeDTO) {}
  rpc startHeartbeats(StartHeartBeatsMsg) returns (OperationOutcomeDTO) {}
}

// Message that the client sends to get the log file names in the /var/log/csle directory
message GetCsleLogFilesMsg {}

// Message that the client sends to get a given log file
message GetLogFileMsg {
  string name = 1;
}

// Message that the client sends when requesting to start containers of a given emulation execution
message StartContainersInExecutionMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to attach containers of a given emulation execution to networks
message AttachContainersToNetworksInExecutionMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to install CSLE libraries on containers that are part of an execution
message InstallLibrariesMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply the kafka config to a given execution
message ApplyKafkaConfigMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply start the SDN controller of an execution
message StartSdnControllerMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply resource constraints to containers of an emulation
message ApplyResouceConstraintsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to create OvsSwitches
message CreateOvsSwitchesMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to test ping between containers in an execution
message PingExecutionMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to configure OVS on an execution
message ConfigureOvsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the SDN controller monitor in an execution
message StartSdnControllerMonitorMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to create users of an execution
message CreateUsersMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to create vulnerabilities of an execution
message CreateVulnsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to create flags of an execution
message CreateFlagsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to create the topology of an execution
message CreateTopologyMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start traffic managers
message StartTrafficManagersMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start traffic generators
message StartTrafficGeneratorsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the client population
message StartClientPopulationMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the client Kafka producer
message StartKafkaClientProducerMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to stop the client Kafka producer
message StopKafkaClientProducerMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the Snort IDSes
message StartSnortIdsesMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the Snort IDSes Monitor threads
message StartSnortIdsesMonitorThreadsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the OSSEC IDSes
message StartOSSECIdsesMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the OSSEC IDSes monitor threads
message StartOSSECIdsesMonitorThreadsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the ELK stack
message StartElkStackMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the Host managers
message StartHostManagersMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply the filebeat configurations
message ApplyFileBeatConfigsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply the packetbeat configurations
message ApplyPacketBeatConfigsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply the metricbeat configurations
message ApplyMetricBeatConfigsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to apply the heartbeat configurations
message ApplyHeartBeatConfigsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends when requesting to start the filebeats of an execution
message StartFileBeatsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
  bool initialStart = 3;
}

// Message that the client sends when requesting to start the packetbeats of an execution
message StartPacketBeatsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
  bool initialStart = 3;
}

// Message that the client sends when requesting to start the metricbeats of an execution
message StartMetricBeatsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
  bool initialStart = 3;
}

// Message that the client sends when requesting to start the heartbeats of an execution
message StartHeartBeatsMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
  bool initialStart = 3;
}

// Message that the client sends to get the docker stastmanager logs
message GetDockerStatsManagerLogsMsg {}

// Message that the client sends to get the Prometheus logs
message GetPrometheusLogsMsg {}

// Message that the client sends to get the Node exporter logs
message GetNodeExporterLogsMsg {}

// Message that the client sends to get the cAdvisor logs
message GetCAdvisorLogsMsg {}

// Message that the client sends to get the pgAdming logs
message GetPgAdminLogsMsg {}

// Message that the client sends to get the grafana logs
message GetGrafanaLogsMsg {}

// Message that the client sends to get the nginx logs
message GetNginxLogsMsg {}

// Message that the client sends to get the docker logs
message GetDockerLogsMsg {}

// Message that the client sends to get the posgresql logs
message GetPostgreSQLLogsMsg {}

// Message that the client sends to get the flask logs
message GetFlaskLogsMsg {}

// Message that the server returns after a request for logs
message LogsDTO {
  repeated string logs = 1;
}

// Message that the server returns after executing an operation requested by a client
message OperationOutcomeDTO {
  bool outcome = 1;
}

// Message that the client sends to get the status of the node
message GetNodeStatusMsg {}

// Message that the server returns when requested by the client, contains info about node's status
message NodeStatusDTO {
  string ip = 1;
  bool leader = 2;
  bool cAdvisorRunning = 3;
  bool prometheusRunning = 4;
  bool grafanaRunning = 5;
  bool pgAdminRunning = 6;
  bool nginxRunning = 7;
  bool flaskRunning = 8;
  bool dockerStatsManagerRunning = 9;
  bool nodeExporterRunning = 10;
  bool postgreSQLRunning = 11;
  bool dockerEngineRunning = 12;
}

// Message that the server returns when changing the status of a service
message ServiceStatusDTO {
  bool running = 1;
}

// Message that the client sends to start PostgreSQL
message StartPostgreSQLMsg {}

// Message that the client sends to start cAdvisor
message StartCAdvisorMsg {}

// Message that the client sends to start node exporter
message StartNodeExporterMsg {}

// Message that the client sends to start grafana
message StartGrafanaMsg {}

// Message that the client sends to start Prometheus
message StartPrometheusMsg {}

// Message that the client sends to start pgAdmin
message StartPgAdminMsg {}

// Message that the client sends to start nginx
message StartNginxMsg {}

// Message that the client sends to start flask
message StartFlaskMsg {}

// Message that the client sends to start dockerStatsManager
message StartDockerStatsManagerMsg {}

// Message that the client sends to start a dockerStatsManager thread for an execution
message StartDockerStatsManagerThreadMsg {
  string emulation = 1;
  int32 ipFirstOctet = 2;
}

// Message that the client sends to start the docker engine
message StartDockerEngineMsg {}

// Message that the client sends to stop PostgreSQL
message StopPostgreSQLMsg {}

// Message that the client sends to stop cAdvisor
message StopCAdvisorMsg {}

// Message that the client sends to stop node exporter
message StopNodeExporterMsg {}

// Message that the client sends to stop grafana
message StopGrafanaMsg {}

// Message that the client sends to stop Prometheus
message StopPrometheusMsg {}

// Message that the client sends to stop pgAdmin
message StopPgAdminMsg {}

// Message that the client sends to stop nginx
message StopNginxMsg {}

// Message that the client sends to stop flask
message StopFlaskMsg {}

// Message that the client sends to stop dockerStatsManager
message StopDockerStatsManagerMsg {}

// Message that the client sends to stop the docker engine
message StopDockerEngineMsg {}
