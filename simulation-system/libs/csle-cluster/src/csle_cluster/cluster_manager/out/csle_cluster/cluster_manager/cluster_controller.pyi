import csle_cluster.cluster_manager.query_cluster_manager
from csle_cluster.cluster_manager.cluster_manager_util import ClusterManagerUtil as ClusterManagerUtil
from csle_common.dao.emulation_config.emulation_execution import EmulationExecution as EmulationExecution
from csle_common.dao.emulation_config.emulation_metrics_time_series import EmulationMetricsTimeSeries as EmulationMetricsTimeSeries
from typing import Any, Dict, List

class ClusterController:
    @staticmethod
    def start_containers_in_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.NodeStatusDTO: ...
    @staticmethod
    def attach_containers_in_execution_to_networks(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.NodeStatusDTO: ...
    @staticmethod
    def is_cluster_manager_running(ip: str, port: int, timeout_sec: int = ...) -> bool: ...
    @staticmethod
    def get_node_status(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.NodeStatusDTO: ...
    @staticmethod
    def start_postgresql(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_cadvisor(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_node_exporter(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_grafana(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_prometheus(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_pgadmin(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_nginx(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_flask(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_docker_statsmanager(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def start_docker_engine(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_postgresql(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_cadvisor(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_node_exporter(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_grafana(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_prometheus(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_pgadmin(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_nginx(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_flask(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_docker_statsmanager(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def stop_docker_engine(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    @staticmethod
    def get_csle_log_files(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_docker_statsmanager_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_prometheus_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_node_exporter_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_cadvisor_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_pgadmin_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_grafana_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_nginx_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_docker_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_postgresql_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_flask_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_log_file(ip: str, port: int, log_file_name: str) -> Dict[str, Any]: ...
    @staticmethod
    def install_libraries(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_kafka_config(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_sdn_controller(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_resource_constraints(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_ovs_switches(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def ping_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def configure_ovs(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_sdn_controller_monitor(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_users(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_vulnerabilities(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_flags(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_topology(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_traffic_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_traffic_generators(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_client_population(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_kafka_client_producer(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_kafka_client_producer(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_idses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_idses_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_idses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_idses_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_elk_stack(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_host_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_filebeats_config(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_packetbeats_config(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_metricbeats_config(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_heartbeats_config(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_filebeats(ip: str, port: int, emulation: str, ip_first_octet: int, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_metricbeats(ip: str, port: int, emulation: str, ip_first_octet: int, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_heartbeats(ip: str, port: int, emulation: str, ip_first_octet: int, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_packetbeats(ip: str, port: int, emulation: str, ip_first_octet: int, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_docker_statsmanager_thread(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_all_executions_of_emulation(ip: str, port: int, emulation: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_all_executions(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def clean_all_executions(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def clean_all_executions_of_emulation(ip: str, port: int, emulation: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def clean_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_traffic_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_traffic_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_traffic_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_client_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_client_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_client_population(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_num_active_clients(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.GetNumClientsDTO: ...
    @staticmethod
    def stop_traffic_generators(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_traffic_generator(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_traffic_generator(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_client_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ClientManagersInfoDTO: ...
    @staticmethod
    def get_traffic_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.TrafficManagersInfoDTO: ...
    @staticmethod
    def stop_all_running_containers(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_container(ip: str, port: int, container_name) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_all_stopped_containers(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_container(ip: str, port: int, container_name: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_all_container_images(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_container_image(ip: str, port: int, image_name: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def list_all_container_images(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ContainerImagesDTO: ...
    @staticmethod
    def list_all_docker_networks(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerNetworksDTO: ...
    @staticmethod
    def start_all_stopped_containers(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_container(ip: str, port: int, container_name: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def list_all_running_containers(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.RunningContainersDTO: ...
    @staticmethod
    def list_all_running_emulations(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.RunningEmulationsDTO: ...
    @staticmethod
    def list_all_stopped_containers(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.StoppedContainersDTO: ...
    @staticmethod
    def create_emulation_networks(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_docker_statsmanager_thread(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_docker_stats_manager_status(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerStatsMonitorStatusDTO: ...
    @staticmethod
    def remove_docker_networks(ip: str, port: int, networks: List[str]) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_all_docker_networks(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_docker_stats_manager_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerStatsManagersInfoDTO: ...
    @staticmethod
    def stop_elk_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_elk_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_elk_status(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ElkStatusDTO: ...
    @staticmethod
    def stop_elk_stack(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_elastic(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_elastic(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_kibana(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_kibana(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_logstash(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_logstash(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_elk_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.ElkManagersInfoDTO: ...
    @staticmethod
    def start_containers_of_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def run_container(ip: str, port: int, image: str, name: str, memory: int, num_cpus: int, create_network: bool, version: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_containers_of_execution(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_host_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_host_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_host_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_host_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_filebeats(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_packetbeats(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_metricbeats(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_heartbeats(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_host_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_filebeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_packetbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_metricbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_heartbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str, initial_start: bool = ...) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_filebeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_packetbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_metricbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_heartbeat(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_filebeat_config(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_packetbeat_config(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_metricbeat_config(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def apply_heartbeat_config(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_host_monitor_threads_statuses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.HostManagerStatusesDTO: ...
    @staticmethod
    def get_host_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.HostManagersInfoDTO: ...
    @staticmethod
    def stop_kafka_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_kafka_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_kafka_topics(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_kafka_status(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.KafkaStatusDTO: ...
    @staticmethod
    def stop_kafka_server(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_kafka_server(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_kafka_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.KafkaManagersInfoDTO: ...
    @staticmethod
    def stop_ossec_idses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ossec_ids(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_ids(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_ids_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ossec_ids_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_ids_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ossec_ids_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ossec_ids_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ossec_ids_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ossec_ids_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_ossec_ids_monitor_thread_statuses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OSSECIdsMonitorThreadStatusesDTO: ...
    @staticmethod
    def get_ossec_ids_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OSSECIdsManagersInfoDTO: ...
    @staticmethod
    def start_ryu_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ryu_manager(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_ryu_status(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuManagerStatusDTO: ...
    @staticmethod
    def start_ryu(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ryu(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_ryu_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuManagersInfoDTO: ...
    @staticmethod
    def stop_snort_idses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_idses_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_ids(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_ids_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_ids(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_ids_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_ids_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_ids_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_ids_managers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_snort_ids_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_ids_manager(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_snort_ids_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_snort_ids_managers_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.SnortIdsManagersInfoDTO: ...
    @staticmethod
    def get_execution_info(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def get_snort_ids_monitor_thread_statuses(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OSSECIdsMonitorThreadStatusesDTO: ...
    @staticmethod
    def create_ryu_tunnel(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def create_kibana_tunnel(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def list_kibana_tunnels(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.KibanaTunnelsDTO: ...
    @staticmethod
    def list_ryu_tunnels(ip: str, port: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuTunnelsDTO: ...
    @staticmethod
    def get_merged_execution_info(execution: EmulationExecution) -> csle_cluster.cluster_manager.cluster_manager_pb2.ExecutionInfoDTO: ...
    @staticmethod
    def remove_kibana_tunnel(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def remove_ryu_tunnel(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_host_monitor_threads(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_host_monitor_thread(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_ryu_monitor(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_ryu_monitor(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def run_emulation(execution: EmulationExecution, physical_servers: List[str], no_traffic: bool = ..., no_clients: bool = ...) -> None: ...
    @staticmethod
    def get_ryu_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_ryu_controller_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_elk_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_elk_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_traffic_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_host_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_ossec_ids_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_ossec_ids_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_snort_ids_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_snort_ids_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_kafka_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_kafka_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_client_manager_logs(ip: str, port: int, emulation: str, ip_first_octet: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_container_logs(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> Dict[str, Any]: ...
    @staticmethod
    def get_cluster_manager_logs(ip: str, port: int) -> Dict[str, Any]: ...
    @staticmethod
    def get_execution_time_series_data(ip: str, port: int, emulation: str, ip_first_octet: int, minutes: int) -> EmulationMetricsTimeSeries: ...
    @staticmethod
    def start_spark_servers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_spark_servers(ip: str, port: int, emulation: str, ip_first_octet: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def start_spark_server(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_spark_server(ip: str, port: int, emulation: str, ip_first_octet: int, container_ip: str) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def check_pid(ip: str, port: int, pid: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    @staticmethod
    def stop_pid(ip: str, port: int, pid: int) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
