from _typeshed import Incomplete

class ClusterManagerStub:
    getNodeStatus: Incomplete
    startPostgreSQL: Incomplete
    startCAdvisor: Incomplete
    startNodeExporter: Incomplete
    startGrafana: Incomplete
    startPrometheus: Incomplete
    startPgAdmin: Incomplete
    startNginx: Incomplete
    startFlask: Incomplete
    startDockerStatsManager: Incomplete
    startDockerStatsManagerThread: Incomplete
    startDockerEngine: Incomplete
    stopPostgreSQL: Incomplete
    stopCAdvisor: Incomplete
    stopNodeExporter: Incomplete
    stopGrafana: Incomplete
    stopPrometheus: Incomplete
    stopPgAdmin: Incomplete
    stopNginx: Incomplete
    stopFlask: Incomplete
    stopDockerStatsManager: Incomplete
    stopDockerEngine: Incomplete
    getCsleLogFiles: Incomplete
    getDockerStatsManagerLogs: Incomplete
    getPrometheusLogs: Incomplete
    getNodeExporterLogs: Incomplete
    getCadvisorLogs: Incomplete
    getPgAdminLogs: Incomplete
    getGrafanaLogs: Incomplete
    getNginxLogs: Incomplete
    getDockerLogs: Incomplete
    getPostrgreSQLLogs: Incomplete
    getFlaskLogs: Incomplete
    getLogFile: Incomplete
    startContainersInExecution: Incomplete
    attachContainersInExecutionToNetworks: Incomplete
    installLibraries: Incomplete
    applyKafkaConfig: Incomplete
    startSdnController: Incomplete
    applyResourceConstraints: Incomplete
    createOvsSwitches: Incomplete
    pingExecution: Incomplete
    configureOvs: Incomplete
    startSdnControllerMonitor: Incomplete
    createUsers: Incomplete
    createVulnerabilities: Incomplete
    createFlags: Incomplete
    createTopology: Incomplete
    startTrafficManagers: Incomplete
    startTrafficGenerators: Incomplete
    startClientPopulation: Incomplete
    startKafkaClientProducer: Incomplete
    stopKafkaClientProducer: Incomplete
    startSnortIdses: Incomplete
    startSnortIdsesMonitorThreads: Incomplete
    startOssecIdses: Incomplete
    startOssecIdsesMonitorThreads: Incomplete
    startElkStack: Incomplete
    startHostManagers: Incomplete
    applyFileBeatsConfig: Incomplete
    applyPacketBeatsConfig: Incomplete
    applyMetricBeatsConfig: Incomplete
    applyHeartBeatsConfig: Incomplete
    startFilebeats: Incomplete
    startPacketbeats: Incomplete
    startMetricbeats: Incomplete
    startHeartbeats: Incomplete
    stopAllExecutionsOfEmulation: Incomplete
    stopExecution: Incomplete
    stopAllExecutions: Incomplete
    cleanAllExecutions: Incomplete
    cleanAllExecutionsOfEmulation: Incomplete
    cleanExecution: Incomplete
    startTrafficManager: Incomplete
    stopTrafficManager: Incomplete
    stopTrafficManagers: Incomplete
    startClientManager: Incomplete
    stopClientPopulation: Incomplete
    stopClientManager: Incomplete
    getNumActiveClients: Incomplete
    startTrafficGenerator: Incomplete
    stopTrafficGenerators: Incomplete
    stopTrafficGenerator: Incomplete
    getClientManagersInfo: Incomplete
    getTrafficManagersInfo: Incomplete
    stopAllRunningContainers: Incomplete
    stopContainer: Incomplete
    removeAllStoppedContainers: Incomplete
    removeContainer: Incomplete
    removeAllContainerImages: Incomplete
    removeContainerImage: Incomplete
    listAllContainerImages: Incomplete
    listAllDockerNetworks: Incomplete
    startAllStoppedContainers: Incomplete
    startContainer: Incomplete
    listAllRunningContainers: Incomplete
    listAllRunningEmulations: Incomplete
    listAllStoppedContainers: Incomplete
    createEmulationNetworks: Incomplete
    stopDockerStatsManagerThread: Incomplete
    getDockerStatsManagerStatus: Incomplete
    removeDockerNetworks: Incomplete
    removeAllDockerNetworks: Incomplete
    getDockerStatsManagersInfo: Incomplete
    startElkManager: Incomplete
    stopElkManager: Incomplete
    getElkStatus: Incomplete
    stopElkStack: Incomplete
    startElastic: Incomplete
    stopElastic: Incomplete
    startKibana: Incomplete
    stopKibana: Incomplete
    startLogstash: Incomplete
    stopLogstash: Incomplete
    getElkManagersInfo: Incomplete
    startContainersOfExecution: Incomplete
    runContainer: Incomplete
    stopContainersOfExecution: Incomplete
    startHostManager: Incomplete
    stopHostManagers: Incomplete
    stopHostManager: Incomplete
    stopFilebeats: Incomplete
    stopPacketbeats: Incomplete
    stopMetricbeats: Incomplete
    stopHeartbeats: Incomplete
    startHostMonitorThreads: Incomplete
    startHostMonitorThread: Incomplete
    startFilebeat: Incomplete
    startPacketbeat: Incomplete
    startMetricbeat: Incomplete
    startHeartbeat: Incomplete
    stopFilebeat: Incomplete
    stopPacketbeat: Incomplete
    stopMetricbeat: Incomplete
    stopHeartbeat: Incomplete
    applyFileBeatConfig: Incomplete
    applyPacketBeatConfig: Incomplete
    applyMetricBeatConfig: Incomplete
    applyHeartBeatConfig: Incomplete
    getHostMonitorThreadsStatuses: Incomplete
    getHostManagersInfo: Incomplete
    stopKafkaManager: Incomplete
    startKafkaManager: Incomplete
    createKafkaTopics: Incomplete
    getKafkaStatus: Incomplete
    stopKafkaServer: Incomplete
    startKafkaServer: Incomplete
    getKafkaManagersInfo: Incomplete
    stopOSSECIDSes: Incomplete
    startOSSECIDSes: Incomplete
    stopOSSECIDS: Incomplete
    startOSSECIDS: Incomplete
    startOSSECIDSManagers: Incomplete
    stopOSSECIDSManagers: Incomplete
    startOSSECIDSManager: Incomplete
    stopOSSECIDSManager: Incomplete
    startOSSECIDSMonitorThread: Incomplete
    stopOSSECIDSMonitorThread: Incomplete
    stopOSSECIDSMonitorThreads: Incomplete
    getOSSECIDSMonitorThreadStatuses: Incomplete
    getOSSECIdsManagersInfo: Incomplete
    startRyuManager: Incomplete
    stopRyuManager: Incomplete
    getRyuStatus: Incomplete
    startRyu: Incomplete
    stopRyu: Incomplete
    getRyuManagersInfo: Incomplete
    stopSnortIdses: Incomplete
    stopSnortIdsesMonitorThreads: Incomplete
    stopSnortIds: Incomplete
    stopSnortIdsMonitorThread: Incomplete
    startSnortIds: Incomplete
    startSnortIdsMonitorThreads: Incomplete
    startSnortIdsMonitorThread: Incomplete
    startSnortIdsManagers: Incomplete
    stopSnortIdsManagers: Incomplete
    startSnortIdsManager: Incomplete
    stopSnortIdsManager: Incomplete
    stopSnortIdsMonitorThreads: Incomplete
    getSnortIdsMonitorThreadStatuses: Incomplete
    getSnortIdsManagersInfo: Incomplete
    getExecutionInfo: Incomplete
    listKibanaTunnels: Incomplete
    createKibanaTunnel: Incomplete
    listRyuTunnels: Incomplete
    createRyuTunnel: Incomplete
    removeKibanaTunnel: Incomplete
    removeRyuTunnel: Incomplete
    stopHostMonitorThreads: Incomplete
    stopHostMonitorThread: Incomplete
    startRyuMonitor: Incomplete
    stopRyuMonitor: Incomplete
    getRyuControllerLogs: Incomplete
    getRyuManagerLogs: Incomplete
    getElkLogs: Incomplete
    getElkManagerLogs: Incomplete
    getTrafficManagerLogs: Incomplete
    getHostManagerLogs: Incomplete
    getOSSECIdsLogs: Incomplete
    getOSSECIdsManagerLogsMsg: Incomplete
    getSnortIdsLogs: Incomplete
    getSnortIdsManagerLogsMsg: Incomplete
    getKafkaLogs: Incomplete
    getKafkaManagerLogs: Incomplete
    getClientManagerLogsMsg: Incomplete
    getContainerLogs: Incomplete
    getClusterManagerLogs: Incomplete
    getExecutionTimeSeriesData: Incomplete
    startSparkServers: Incomplete
    stopSparkServers: Incomplete
    startSparkServer: Incomplete
    stopSparkServer: Incomplete
    checkPid: Incomplete
    stopPid: Incomplete
    def __init__(self, channel) -> None: ...

class ClusterManagerServicer:
    def getNodeStatus(self, request, context) -> None: ...
    def startPostgreSQL(self, request, context) -> None: ...
    def startCAdvisor(self, request, context) -> None: ...
    def startNodeExporter(self, request, context) -> None: ...
    def startGrafana(self, request, context) -> None: ...
    def startPrometheus(self, request, context) -> None: ...
    def startPgAdmin(self, request, context) -> None: ...
    def startNginx(self, request, context) -> None: ...
    def startFlask(self, request, context) -> None: ...
    def startDockerStatsManager(self, request, context) -> None: ...
    def startDockerStatsManagerThread(self, request, context) -> None: ...
    def startDockerEngine(self, request, context) -> None: ...
    def stopPostgreSQL(self, request, context) -> None: ...
    def stopCAdvisor(self, request, context) -> None: ...
    def stopNodeExporter(self, request, context) -> None: ...
    def stopGrafana(self, request, context) -> None: ...
    def stopPrometheus(self, request, context) -> None: ...
    def stopPgAdmin(self, request, context) -> None: ...
    def stopNginx(self, request, context) -> None: ...
    def stopFlask(self, request, context) -> None: ...
    def stopDockerStatsManager(self, request, context) -> None: ...
    def stopDockerEngine(self, request, context) -> None: ...
    def getCsleLogFiles(self, request, context) -> None: ...
    def getDockerStatsManagerLogs(self, request, context) -> None: ...
    def getPrometheusLogs(self, request, context) -> None: ...
    def getNodeExporterLogs(self, request, context) -> None: ...
    def getCadvisorLogs(self, request, context) -> None: ...
    def getPgAdminLogs(self, request, context) -> None: ...
    def getGrafanaLogs(self, request, context) -> None: ...
    def getNginxLogs(self, request, context) -> None: ...
    def getDockerLogs(self, request, context) -> None: ...
    def getPostrgreSQLLogs(self, request, context) -> None: ...
    def getFlaskLogs(self, request, context) -> None: ...
    def getLogFile(self, request, context) -> None: ...
    def startContainersInExecution(self, request, context) -> None: ...
    def attachContainersInExecutionToNetworks(self, request, context) -> None: ...
    def installLibraries(self, request, context) -> None: ...
    def applyKafkaConfig(self, request, context) -> None: ...
    def startSdnController(self, request, context) -> None: ...
    def applyResourceConstraints(self, request, context) -> None: ...
    def createOvsSwitches(self, request, context) -> None: ...
    def pingExecution(self, request, context) -> None: ...
    def configureOvs(self, request, context) -> None: ...
    def startSdnControllerMonitor(self, request, context) -> None: ...
    def createUsers(self, request, context) -> None: ...
    def createVulnerabilities(self, request, context) -> None: ...
    def createFlags(self, request, context) -> None: ...
    def createTopology(self, request, context) -> None: ...
    def startTrafficManagers(self, request, context) -> None: ...
    def startTrafficGenerators(self, request, context) -> None: ...
    def startClientPopulation(self, request, context) -> None: ...
    def startKafkaClientProducer(self, request, context) -> None: ...
    def stopKafkaClientProducer(self, request, context) -> None: ...
    def startSnortIdses(self, request, context) -> None: ...
    def startSnortIdsesMonitorThreads(self, request, context) -> None: ...
    def startOssecIdses(self, request, context) -> None: ...
    def startOssecIdsesMonitorThreads(self, request, context) -> None: ...
    def startElkStack(self, request, context) -> None: ...
    def startHostManagers(self, request, context) -> None: ...
    def applyFileBeatsConfig(self, request, context) -> None: ...
    def applyPacketBeatsConfig(self, request, context) -> None: ...
    def applyMetricBeatsConfig(self, request, context) -> None: ...
    def applyHeartBeatsConfig(self, request, context) -> None: ...
    def startFilebeats(self, request, context) -> None: ...
    def startPacketbeats(self, request, context) -> None: ...
    def startMetricbeats(self, request, context) -> None: ...
    def startHeartbeats(self, request, context) -> None: ...
    def stopAllExecutionsOfEmulation(self, request, context) -> None: ...
    def stopExecution(self, request, context) -> None: ...
    def stopAllExecutions(self, request, context) -> None: ...
    def cleanAllExecutions(self, request, context) -> None: ...
    def cleanAllExecutionsOfEmulation(self, request, context) -> None: ...
    def cleanExecution(self, request, context) -> None: ...
    def startTrafficManager(self, request, context) -> None: ...
    def stopTrafficManager(self, request, context) -> None: ...
    def stopTrafficManagers(self, request, context) -> None: ...
    def startClientManager(self, request, context) -> None: ...
    def stopClientPopulation(self, request, context) -> None: ...
    def stopClientManager(self, request, context) -> None: ...
    def getNumActiveClients(self, request, context) -> None: ...
    def startTrafficGenerator(self, request, context) -> None: ...
    def stopTrafficGenerators(self, request, context) -> None: ...
    def stopTrafficGenerator(self, request, context) -> None: ...
    def getClientManagersInfo(self, request, context) -> None: ...
    def getTrafficManagersInfo(self, request, context) -> None: ...
    def stopAllRunningContainers(self, request, context) -> None: ...
    def stopContainer(self, request, context) -> None: ...
    def removeAllStoppedContainers(self, request, context) -> None: ...
    def removeContainer(self, request, context) -> None: ...
    def removeAllContainerImages(self, request, context) -> None: ...
    def removeContainerImage(self, request, context) -> None: ...
    def listAllContainerImages(self, request, context) -> None: ...
    def listAllDockerNetworks(self, request, context) -> None: ...
    def startAllStoppedContainers(self, request, context) -> None: ...
    def startContainer(self, request, context) -> None: ...
    def listAllRunningContainers(self, request, context) -> None: ...
    def listAllRunningEmulations(self, request, context) -> None: ...
    def listAllStoppedContainers(self, request, context) -> None: ...
    def createEmulationNetworks(self, request, context) -> None: ...
    def stopDockerStatsManagerThread(self, request, context) -> None: ...
    def getDockerStatsManagerStatus(self, request, context) -> None: ...
    def removeDockerNetworks(self, request, context) -> None: ...
    def removeAllDockerNetworks(self, request, context) -> None: ...
    def getDockerStatsManagersInfo(self, request, context) -> None: ...
    def startElkManager(self, request, context) -> None: ...
    def stopElkManager(self, request, context) -> None: ...
    def getElkStatus(self, request, context) -> None: ...
    def stopElkStack(self, request, context) -> None: ...
    def startElastic(self, request, context) -> None: ...
    def stopElastic(self, request, context) -> None: ...
    def startKibana(self, request, context) -> None: ...
    def stopKibana(self, request, context) -> None: ...
    def startLogstash(self, request, context) -> None: ...
    def stopLogstash(self, request, context) -> None: ...
    def getElkManagersInfo(self, request, context) -> None: ...
    def startContainersOfExecution(self, request, context) -> None: ...
    def runContainer(self, request, context) -> None: ...
    def stopContainersOfExecution(self, request, context) -> None: ...
    def startHostManager(self, request, context) -> None: ...
    def stopHostManagers(self, request, context) -> None: ...
    def stopHostManager(self, request, context) -> None: ...
    def stopFilebeats(self, request, context) -> None: ...
    def stopPacketbeats(self, request, context) -> None: ...
    def stopMetricbeats(self, request, context) -> None: ...
    def stopHeartbeats(self, request, context) -> None: ...
    def startHostMonitorThreads(self, request, context) -> None: ...
    def startHostMonitorThread(self, request, context) -> None: ...
    def startFilebeat(self, request, context) -> None: ...
    def startPacketbeat(self, request, context) -> None: ...
    def startMetricbeat(self, request, context) -> None: ...
    def startHeartbeat(self, request, context) -> None: ...
    def stopFilebeat(self, request, context) -> None: ...
    def stopPacketbeat(self, request, context) -> None: ...
    def stopMetricbeat(self, request, context) -> None: ...
    def stopHeartbeat(self, request, context) -> None: ...
    def applyFileBeatConfig(self, request, context) -> None: ...
    def applyPacketBeatConfig(self, request, context) -> None: ...
    def applyMetricBeatConfig(self, request, context) -> None: ...
    def applyHeartBeatConfig(self, request, context) -> None: ...
    def getHostMonitorThreadsStatuses(self, request, context) -> None: ...
    def getHostManagersInfo(self, request, context) -> None: ...
    def stopKafkaManager(self, request, context) -> None: ...
    def startKafkaManager(self, request, context) -> None: ...
    def createKafkaTopics(self, request, context) -> None: ...
    def getKafkaStatus(self, request, context) -> None: ...
    def stopKafkaServer(self, request, context) -> None: ...
    def startKafkaServer(self, request, context) -> None: ...
    def getKafkaManagersInfo(self, request, context) -> None: ...
    def stopOSSECIDSes(self, request, context) -> None: ...
    def startOSSECIDSes(self, request, context) -> None: ...
    def stopOSSECIDS(self, request, context) -> None: ...
    def startOSSECIDS(self, request, context) -> None: ...
    def startOSSECIDSManagers(self, request, context) -> None: ...
    def stopOSSECIDSManagers(self, request, context) -> None: ...
    def startOSSECIDSManager(self, request, context) -> None: ...
    def stopOSSECIDSManager(self, request, context) -> None: ...
    def startOSSECIDSMonitorThread(self, request, context) -> None: ...
    def stopOSSECIDSMonitorThread(self, request, context) -> None: ...
    def stopOSSECIDSMonitorThreads(self, request, context) -> None: ...
    def getOSSECIDSMonitorThreadStatuses(self, request, context) -> None: ...
    def getOSSECIdsManagersInfo(self, request, context) -> None: ...
    def startRyuManager(self, request, context) -> None: ...
    def stopRyuManager(self, request, context) -> None: ...
    def getRyuStatus(self, request, context) -> None: ...
    def startRyu(self, request, context) -> None: ...
    def stopRyu(self, request, context) -> None: ...
    def getRyuManagersInfo(self, request, context) -> None: ...
    def stopSnortIdses(self, request, context) -> None: ...
    def stopSnortIdsesMonitorThreads(self, request, context) -> None: ...
    def stopSnortIds(self, request, context) -> None: ...
    def stopSnortIdsMonitorThread(self, request, context) -> None: ...
    def startSnortIds(self, request, context) -> None: ...
    def startSnortIdsMonitorThreads(self, request, context) -> None: ...
    def startSnortIdsMonitorThread(self, request, context) -> None: ...
    def startSnortIdsManagers(self, request, context) -> None: ...
    def stopSnortIdsManagers(self, request, context) -> None: ...
    def startSnortIdsManager(self, request, context) -> None: ...
    def stopSnortIdsManager(self, request, context) -> None: ...
    def stopSnortIdsMonitorThreads(self, request, context) -> None: ...
    def getSnortIdsMonitorThreadStatuses(self, request, context) -> None: ...
    def getSnortIdsManagersInfo(self, request, context) -> None: ...
    def getExecutionInfo(self, request, context) -> None: ...
    def listKibanaTunnels(self, request, context) -> None: ...
    def createKibanaTunnel(self, request, context) -> None: ...
    def listRyuTunnels(self, request, context) -> None: ...
    def createRyuTunnel(self, request, context) -> None: ...
    def removeKibanaTunnel(self, request, context) -> None: ...
    def removeRyuTunnel(self, request, context) -> None: ...
    def stopHostMonitorThreads(self, request, context) -> None: ...
    def stopHostMonitorThread(self, request, context) -> None: ...
    def startRyuMonitor(self, request, context) -> None: ...
    def stopRyuMonitor(self, request, context) -> None: ...
    def getRyuControllerLogs(self, request, context) -> None: ...
    def getRyuManagerLogs(self, request, context) -> None: ...
    def getElkLogs(self, request, context) -> None: ...
    def getElkManagerLogs(self, request, context) -> None: ...
    def getTrafficManagerLogs(self, request, context) -> None: ...
    def getHostManagerLogs(self, request, context) -> None: ...
    def getOSSECIdsLogs(self, request, context) -> None: ...
    def getOSSECIdsManagerLogsMsg(self, request, context) -> None: ...
    def getSnortIdsLogs(self, request, context) -> None: ...
    def getSnortIdsManagerLogsMsg(self, request, context) -> None: ...
    def getKafkaLogs(self, request, context) -> None: ...
    def getKafkaManagerLogs(self, request, context) -> None: ...
    def getClientManagerLogsMsg(self, request, context) -> None: ...
    def getContainerLogs(self, request, context) -> None: ...
    def getClusterManagerLogs(self, request, context) -> None: ...
    def getExecutionTimeSeriesData(self, request, context) -> None: ...
    def startSparkServers(self, request, context) -> None: ...
    def stopSparkServers(self, request, context) -> None: ...
    def startSparkServer(self, request, context) -> None: ...
    def stopSparkServer(self, request, context) -> None: ...
    def checkPid(self, request, context) -> None: ...
    def stopPid(self, request, context) -> None: ...

def add_ClusterManagerServicer_to_server(servicer, server) -> None: ...

class ClusterManager:
    @staticmethod
    def getNodeStatus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startPostgreSQL(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startCAdvisor(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startNodeExporter(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startGrafana(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startPrometheus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startPgAdmin(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startNginx(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startFlask(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startDockerStatsManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startDockerStatsManagerThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startDockerEngine(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPostgreSQL(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopCAdvisor(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopNodeExporter(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopGrafana(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPrometheus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPgAdmin(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopNginx(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopFlask(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopDockerStatsManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopDockerEngine(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getCsleLogFiles(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getDockerStatsManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getPrometheusLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getNodeExporterLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getCadvisorLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getPgAdminLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getGrafanaLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getNginxLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getDockerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getPostrgreSQLLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getFlaskLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getLogFile(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startContainersInExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def attachContainersInExecutionToNetworks(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def installLibraries(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyKafkaConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSdnController(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyResourceConstraints(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createOvsSwitches(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def pingExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def configureOvs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSdnControllerMonitor(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createUsers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createVulnerabilities(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createFlags(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createTopology(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startTrafficManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startTrafficGenerators(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startClientPopulation(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startKafkaClientProducer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopKafkaClientProducer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdsesMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOssecIdses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOssecIdsesMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startElkStack(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHostManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyFileBeatsConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyPacketBeatsConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyMetricBeatsConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyHeartBeatsConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startFilebeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startPacketbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startMetricbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHeartbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopAllExecutionsOfEmulation(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopAllExecutions(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def cleanAllExecutions(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def cleanAllExecutionsOfEmulation(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def cleanExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startTrafficManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopTrafficManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopTrafficManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startClientManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopClientPopulation(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopClientManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getNumActiveClients(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startTrafficGenerator(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopTrafficGenerators(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopTrafficGenerator(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getClientManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getTrafficManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopAllRunningContainers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopContainer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeAllStoppedContainers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeContainer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeAllContainerImages(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeContainerImage(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listAllContainerImages(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listAllDockerNetworks(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startAllStoppedContainers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startContainer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listAllRunningContainers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listAllRunningEmulations(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listAllStoppedContainers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createEmulationNetworks(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopDockerStatsManagerThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getDockerStatsManagerStatus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeDockerNetworks(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeAllDockerNetworks(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getDockerStatsManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startElkManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopElkManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getElkStatus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopElkStack(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startElastic(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopElastic(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startKibana(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopKibana(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startLogstash(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopLogstash(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getElkManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startContainersOfExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def runContainer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopContainersOfExecution(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHostManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHostManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHostManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopFilebeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPacketbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopMetricbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHeartbeats(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHostMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHostMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startFilebeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startPacketbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startMetricbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startHeartbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopFilebeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPacketbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopMetricbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHeartbeat(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyFileBeatConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyPacketBeatConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyMetricBeatConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def applyHeartBeatConfig(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getHostMonitorThreadsStatuses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getHostManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopKafkaManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startKafkaManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createKafkaTopics(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getKafkaStatus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopKafkaServer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startKafkaServer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getKafkaManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDSes(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOSSECIDSes(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDS(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOSSECIDS(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOSSECIDSManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDSManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOSSECIDSManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDSManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startOSSECIDSMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDSMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopOSSECIDSMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getOSSECIDSMonitorThreadStatuses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getOSSECIdsManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startRyuManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopRyuManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getRyuStatus(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startRyu(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopRyu(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getRyuManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdsesMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIds(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdsMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIds(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdsMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdsMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdsManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdsManagers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSnortIdsManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdsManager(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSnortIdsMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getSnortIdsMonitorThreadStatuses(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getSnortIdsManagersInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getExecutionInfo(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listKibanaTunnels(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createKibanaTunnel(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def listRyuTunnels(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def createRyuTunnel(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeKibanaTunnel(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def removeRyuTunnel(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHostMonitorThreads(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopHostMonitorThread(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startRyuMonitor(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopRyuMonitor(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getRyuControllerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getRyuManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getElkLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getElkManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getTrafficManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getHostManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getOSSECIdsLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getOSSECIdsManagerLogsMsg(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getSnortIdsLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getSnortIdsManagerLogsMsg(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getKafkaLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getKafkaManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getClientManagerLogsMsg(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getContainerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getClusterManagerLogs(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def getExecutionTimeSeriesData(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSparkServers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSparkServers(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def startSparkServer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopSparkServer(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def checkPid(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
    @staticmethod
    def stopPid(request, target, options=..., channel_credentials: Incomplete | None = ..., call_credentials: Incomplete | None = ..., insecure: bool = ..., compression: Incomplete | None = ..., wait_for_ready: Incomplete | None = ..., timeout: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
