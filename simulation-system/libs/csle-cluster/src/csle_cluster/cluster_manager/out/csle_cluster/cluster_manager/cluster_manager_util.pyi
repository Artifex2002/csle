import csle_cluster.cluster_manager.cluster_manager_pb2 as cluster_manager_pb2
import csle_collector.host_manager.host_manager_pb2
import logging
from csle_collector.client_manager.client_population_metrics import ClientPopulationMetrics
from csle_collector.docker_stats_manager.docker_stats import DockerStats
from csle_collector.host_manager.host_metrics import HostMetrics
from csle_collector.ossec_ids_manager.dao.ossec_ids_alert_counters import OSSECIdsAlertCounters
from csle_collector.snort_ids_manager.snort_ids_alert_counters import SnortIdsAlertCounters
from csle_collector.snort_ids_manager.snort_ids_ip_alert_counters import SnortIdsIPAlertCounters
from csle_collector.snort_ids_manager.snort_ids_rule_counters import SnortIdsRuleCounters
from csle_common.dao.emulation_action.attacker.emulation_attacker_action import EmulationAttackerAction
from csle_common.dao.emulation_action.defender.emulation_defender_action import EmulationDefenderAction
from csle_common.dao.emulation_config.client_managers_info import ClientManagersInfo
from csle_common.dao.emulation_config.docker_stats_managers_info import DockerStatsManagersInfo
from csle_common.dao.emulation_config.elk_managers_info import ELKManagersInfo
from csle_common.dao.emulation_config.emulation_env_config import EmulationEnvConfig as EmulationEnvConfig
from csle_common.dao.emulation_config.emulation_execution import EmulationExecution as EmulationExecution
from csle_common.dao.emulation_config.emulation_execution_info import EmulationExecutionInfo
from csle_common.dao.emulation_config.emulation_metrics_time_series import EmulationMetricsTimeSeries
from csle_common.dao.emulation_config.host_managers_info import HostManagersInfo
from csle_common.dao.emulation_config.kafka_managers_info import KafkaManagersInfo
from csle_common.dao.emulation_config.node_container_config import NodeContainerConfig as NodeContainerConfig
from csle_common.dao.emulation_config.ossec_managers_info import OSSECIDSManagersInfo
from csle_common.dao.emulation_config.ryu_managers_info import RyuManagersInfo
from csle_common.dao.emulation_config.snort_managers_info import SnortIdsManagersInfo
from csle_common.dao.emulation_config.traffic_managers_info import TrafficManagersInfo
from csle_ryu.dao.agg_flow_statistic import AggFlowStatistic
from csle_ryu.dao.avg_flow_statistic import AvgFlowStatistic
from csle_ryu.dao.avg_port_statistic import AvgPortStatistic
from csle_ryu.dao.flow_statistic import FlowStatistic
from csle_ryu.dao.port_statistic import PortStatistic
from typing import Any, Dict, List, Tuple, Union

class ClusterManagerUtil:
    @staticmethod
    def convert_traffic_dto_to_traffic_manager_info_dto(traffic_dto: csle_collector.traffic_manager.traffic_manager_pb2.TrafficDTO) -> cluster_manager_pb2.TrafficManagerInfoDTO: ...
    @staticmethod
    def convert_traffic_dto_to_traffic_manager_info_dto_reverse(traffic_dto: cluster_manager_pb2.TrafficManagerInfoDTO) -> csle_collector.traffic_manager.traffic_manager_pb2.TrafficDTO: ...
    @staticmethod
    def get_empty_traffic_manager_info_dto() -> cluster_manager_pb2.TrafficManagerInfoDTO: ...
    @staticmethod
    def get_empty_traffic_managers_info_dto() -> cluster_manager_pb2.TrafficManagersInfoDTO: ...
    @staticmethod
    def get_empty_client_managers_info_dto() -> cluster_manager_pb2.ClientManagersInfoDTO: ...
    @staticmethod
    def get_empty_get_num_clients_dto() -> cluster_manager_pb2.GetNumActiveClientsMsg: ...
    @staticmethod
    def convert_client_dto_to_get_num_clients_dto(clients_dto: csle_collector.client_manager.client_manager_pb2.ClientsDTO) -> cluster_manager_pb2.GetNumClientsDTO: ...
    @staticmethod
    def convert_client_dto_to_get_num_clients_dto_reverse(clients_dto: cluster_manager_pb2.GetNumClientsDTO) -> csle_collector.client_manager.client_manager_pb2.ClientsDTO: ...
    @staticmethod
    def node_status_dto_to_dict(node_status_dto: cluster_manager_pb2.NodeStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def service_status_dto_to_dict(node_status_dto: cluster_manager_pb2.ServiceStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def logs_dto_to_dict(logs_dto: cluster_manager_pb2.LogsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def get_num_clients_dto_to_dict(get_num_clients_dto: cluster_manager_pb2.GetNumClientsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def get_active_ips(emulation_env_config: EmulationEnvConfig) -> List[str]: ...
    @staticmethod
    def client_managers_info_dto_to_dict(clients_managers_info_dto: cluster_manager_pb2.ClientManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def traffic_manager_info_dto_to_dict(traffic_manager_info_dto: cluster_manager_pb2.TrafficManagerInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def traffic_managers_info_dto_to_dict(traffic_managers_info_dto: cluster_manager_pb2.TrafficManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def docker_stats_monitor_status_dto_to_dict(docker_stats_managers_info_dto: cluster_manager_pb2.DockerStatsMonitorStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def docker_stats_managers_info_dto_to_dict(docker_stats_managers_info_dto: cluster_manager_pb2.DockerStatsManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def stopped_containers_dto_to_dict(stopped_containers_dto_to_dict: cluster_manager_pb2.StoppedContainersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def docker_container_dto_to_dict(docker_container_dto_to_dict: cluster_manager_pb2.DockerContainerDTO) -> Dict[str, Any]: ...
    @staticmethod
    def running_emulations_dto_to_dict(running_emulations_dto: cluster_manager_pb2.RunningEmulationsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def running_containers_dto_to_dict(running_containers_dto_to_dict: cluster_manager_pb2.RunningContainersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def docker_networks_dto_to_dict(docker_networks_dto: cluster_manager_pb2.DockerNetworksDTO) -> Dict[str, Any]: ...
    @staticmethod
    def container_image_dto_to_dict(container_image_dto: cluster_manager_pb2.ContainerImageDTO) -> Dict[str, Any]: ...
    @staticmethod
    def container_images_dtos_to_dict(container_images_dtos: cluster_manager_pb2.ContainerImagesDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_docker_stats_monitor_dto(monitor_dto: csle_collector.docker_stats_manager.docker_stats_manager_pb2.DockerStatsMonitorDTO) -> cluster_manager_pb2.DockerStatsMonitorStatusDTO: ...
    @staticmethod
    def convert_docker_stats_monitor_dto_reverse(monitor_dto: cluster_manager_pb2.DockerStatsMonitorStatusDTO) -> csle_collector.docker_stats_manager.docker_stats_manager_pb2.DockerStatsMonitorDTO: ...
    @staticmethod
    def elk_status_dto_to_dict(elk_status_dto: cluster_manager_pb2.ElkStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def elk_managers_info_dto_to_dict(elk_managers_info_dto: cluster_manager_pb2.ElkManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_elk_dto(elk_dto: csle_collector.elk_manager.elk_manager_pb2.ElkDTO) -> cluster_manager_pb2.ElkStatusDTO: ...
    @staticmethod
    def convert_elk_dto_reverse(elk_dto: cluster_manager_pb2.ElkStatusDTO) -> csle_collector.elk_manager.elk_manager_pb2.ElkDTO: ...
    @staticmethod
    def convert_snort_ids_monitor_dto_to_snort_ids_status_dto(snort_dto: csle_collector.snort_ids_manager.snort_ids_manager_pb2.SnortIdsMonitorDTO) -> cluster_manager_pb2.SnortIdsStatusDTO: ...
    @staticmethod
    def convert_snort_ids_monitor_dto_to_snort_ids_status_dto_reverse(snort_dto: cluster_manager_pb2.SnortIdsStatusDTO) -> csle_collector.snort_ids_manager.snort_ids_manager_pb2.SnortIdsMonitorDTO: ...
    @staticmethod
    def convert_ossec_ids_monitor_dto_to_ossec_ids_status_dto(ossec_dto: csle_collector.ossec_ids_manager.ossec_ids_manager_pb2.OSSECIdsMonitorDTO) -> cluster_manager_pb2.OSSECIdsStatusDTO: ...
    @staticmethod
    def convert_ossec_ids_monitor_dto_to_ossec_ids_status_dto_reverse(ossec_dto: cluster_manager_pb2.OSSECIdsStatusDTO) -> csle_collector.ossec_ids_manager.ossec_ids_manager_pb2.OSSECIdsMonitorDTO: ...
    @staticmethod
    def convert_kafka_dto_to_kafka_status_dto(kafka_dto: csle_collector.kafka_manager.kafka_manager_pb2.KafkaDTO) -> cluster_manager_pb2.KafkaStatusDTO: ...
    @staticmethod
    def convert_kafka_dto_to_kafka_status_dto_reverse(kafka_dto: cluster_manager_pb2.KafkaStatusDTO) -> csle_collector.kafka_manager.kafka_manager_pb2.KafkaDTO: ...
    @staticmethod
    def convert_ryu_dto_to_ryu_status_dto(ryu_dto: csle_collector.ryu_manager.ryu_manager_pb2.RyuDTO) -> cluster_manager_pb2.RyuManagerStatusDTO: ...
    @staticmethod
    def convert_ryu_dto_to_ryu_status_dto_reverse(ryu_dto: cluster_manager_pb2.RyuManagerStatusDTO) -> csle_collector.ryu_manager.ryu_manager_pb2.RyuDTO: ...
    @staticmethod
    def snort_ids_status_dto_to_dict(snort_ids_status_dto: cluster_manager_pb2.SnortIdsStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ossec_ids_status_dto_to_dict(ossec_ids_status_dto: cluster_manager_pb2.OSSECIdsStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def snort_ids_monitor_thread_statuses_dto_to_dict(snort_ids_monitor_thread_statuses_dto: cluster_manager_pb2.SnortIdsMonitorThreadStatusesDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ossec_ids_monitor_thread_statuses_dto_to_dict(ossec_ids_monitor_thread_statuses_dto: cluster_manager_pb2.OSSECIdsMonitorThreadStatusesDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ryu_manager_status_dto_to_dict(ryu_manager_status_dto_to_dict: cluster_manager_pb2.RyuManagerStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def host_manager_status_dto_to_dict(host_manager_status_dto: cluster_manager_pb2.HostManagerStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def kafka_status_dto_to_dict(kafka_status_dto: cluster_manager_pb2.KafkaStatusDTO) -> Dict[str, Any]: ...
    @staticmethod
    def snort_managers_info_dto_to_dict(snort_managers_info_dto: cluster_manager_pb2.SnortIdsManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ossec_managers_info_dto_to_dict(ossec_managers_info_dto: cluster_manager_pb2.OSSECIdsManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def kafka_managers_info_dto_to_dict(kafka_managers_info_dto: cluster_manager_pb2.KafkaManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def host_managers_info_dto_to_dict(host_managers_info_dto: cluster_manager_pb2.HostManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ryu_managers_info_dto_to_dict(ryu_managers_info_dto: cluster_manager_pb2.RyuManagersInfoDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_host_status_to_host_manager_status_dto(host_status_dto_and_ip: Tuple[csle_collector.host_manager.host_manager_pb2.HostStatusDTO, str]) -> cluster_manager_pb2.HostManagerStatusDTO: ...
    @staticmethod
    def convert_host_status_to_host_manager_status_dto_reverse(host_status_dto: cluster_manager_pb2.HostManagerStatusDTO) -> Tuple[csle_collector.host_manager.host_manager_pb2.HostStatusDTO, str]: ...
    @staticmethod
    def convert_snort_info_dto(snort_ids_managers_info_dto: SnortIdsManagersInfo) -> cluster_manager_pb2.SnortIdsManagersInfoDTO: ...
    @staticmethod
    def convert_snort_info_dto_reverse(snort_ids_managers_info_dto: cluster_manager_pb2.SnortIdsManagersInfoDTO) -> SnortIdsManagersInfo: ...
    @staticmethod
    def convert_ossec_info_dto(ossec_ids_managers_info_dto: OSSECIDSManagersInfo) -> cluster_manager_pb2.OSSECIdsManagersInfoDTO: ...
    @staticmethod
    def convert_ossec_info_dto_reverse(ossec_ids_managers_info_dto: cluster_manager_pb2.OSSECIdsManagersInfoDTO) -> OSSECIDSManagersInfo: ...
    @staticmethod
    def convert_elk_info_dto(elk_managers_dto: ELKManagersInfo) -> cluster_manager_pb2.ElkManagersInfoDTO: ...
    @staticmethod
    def convert_elk_info_dto_reverse(elk_managers_dto: cluster_manager_pb2.ElkManagersInfoDTO) -> ELKManagersInfo: ...
    @staticmethod
    def convert_ryu_info_dto(ryu_managers_info_dto: RyuManagersInfo) -> cluster_manager_pb2.RyuManagersInfoDTO: ...
    @staticmethod
    def convert_ryu_info_dto_reverse(ryu_managers_info_dto: cluster_manager_pb2.RyuManagersInfoDTO) -> RyuManagersInfo: ...
    @staticmethod
    def convert_host_info_dto(host_managers_dto: HostManagersInfo) -> cluster_manager_pb2.HostManagersInfoDTO: ...
    @staticmethod
    def convert_host_info_dto_reverse(host_managers_dto: cluster_manager_pb2.HostManagersInfoDTO) -> HostManagersInfo: ...
    @staticmethod
    def convert_kafka_info_dto(kafka_managers_info_dto: KafkaManagersInfo) -> cluster_manager_pb2.KafkaManagersInfoDTO: ...
    @staticmethod
    def convert_kafka_info_dto_reverse(kafka_managers_info_dto: cluster_manager_pb2.KafkaManagersInfoDTO) -> KafkaManagersInfo: ...
    @staticmethod
    def convert_client_info_dto(client_managers_dto: ClientManagersInfo) -> cluster_manager_pb2.ClientManagersInfoDTO: ...
    @staticmethod
    def convert_client_info_dto_reverse(client_managers_dto: cluster_manager_pb2.ClientManagersInfoDTO) -> ClientManagersInfo: ...
    @staticmethod
    def convert_traffic_info_dto(traffic_managers_dto: TrafficManagersInfo) -> cluster_manager_pb2.TrafficManagerInfoDTO: ...
    @staticmethod
    def convert_traffic_info_dto_reverse(traffic_managers_dto: cluster_manager_pb2.TrafficManagerInfoDTO) -> TrafficManagersInfo: ...
    @staticmethod
    def convert_docker_info_dto(docker_stats_managers_dto: DockerStatsManagersInfo) -> cluster_manager_pb2.DockerStatsManagersInfoDTO: ...
    @staticmethod
    def convert_docker_info_dto_reverse(docker_stats_managers_dto: cluster_manager_pb2.DockerStatsManagersInfoDTO) -> DockerStatsManagersInfo: ...
    @staticmethod
    def convert_execution_info_dto(execution_info_dto: EmulationExecutionInfo) -> cluster_manager_pb2.ExecutionInfoDTO: ...
    @staticmethod
    def get_empty_kafka_dto() -> cluster_manager_pb2.KafkaStatusDTO: ...
    @staticmethod
    def get_empty_ryu_manager_status_dto() -> cluster_manager_pb2.RyuManagerStatusDTO: ...
    @staticmethod
    def get_empty_docker_stats_monitor_status_dto() -> cluster_manager_pb2.DockerStatsMonitorStatusDTO: ...
    @staticmethod
    def get_empty_num_clients_dto() -> cluster_manager_pb2.GetNumClientsDTO: ...
    @staticmethod
    def get_empty_elk_status_dto() -> cluster_manager_pb2.ElkStatusDTO: ...
    @staticmethod
    def get_empty_snort_ids_status_dto() -> cluster_manager_pb2.SnortIdsStatusDTO: ...
    @staticmethod
    def get_empty_ossec_ids_status_dto() -> cluster_manager_pb2.OSSECIdsStatusDTO: ...
    @staticmethod
    def get_empty_ossec_ids_monitor_dto() -> cluster_manager_pb2.OSSECIdsStatusDTO: ...
    @staticmethod
    def get_empty_host_manager_status_dto() -> cluster_manager_pb2.HostManagerStatusDTO: ...
    @staticmethod
    def get_empty_snort_managers_info_dto() -> cluster_manager_pb2.SnortIdsManagersInfoDTO: ...
    @staticmethod
    def get_empty_ossec_managers_info_dto() -> cluster_manager_pb2.OSSECIdsManagersInfoDTO: ...
    @staticmethod
    def get_empty_elk_managers_info_dto() -> cluster_manager_pb2.ElkManagersInfoDTO: ...
    @staticmethod
    def get_empty_ryu_managers_info_dto() -> cluster_manager_pb2.RyuManagersInfoDTO: ...
    @staticmethod
    def get_empty_host_managers_info_dto() -> cluster_manager_pb2.HostManagersInfoDTO: ...
    @staticmethod
    def get_empty_kafka_managers_info_dto() -> cluster_manager_pb2.KafkaManagersInfoDTO: ...
    @staticmethod
    def get_empty_docker_managers_info_dto() -> cluster_manager_pb2.DockerStatsManagersInfoDTO: ...
    @staticmethod
    def get_empty_execution_info_dto() -> cluster_manager_pb2.ExecutionInfoDTO: ...
    @staticmethod
    def get_empty_kibana_tunnel_dto() -> cluster_manager_pb2.KibanaTunnelDTO: ...
    @staticmethod
    def get_empty_kibana_tunnels_dto() -> cluster_manager_pb2.KibanaTunnelsDTO: ...
    @staticmethod
    def kibana_tunnel_dto_to_dict(kibana_tunnel_dto: cluster_manager_pb2.KibanaTunnelDTO) -> Dict[str, Any]: ...
    @staticmethod
    def kibana_tunnels_dto_to_dict(kibana_tunnels_dto: cluster_manager_pb2.KibanaTunnelsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def get_empty_ryu_tunnel_dto() -> cluster_manager_pb2.RyuTunnelDTO: ...
    @staticmethod
    def get_empty_ryu_tunnels_dto() -> cluster_manager_pb2.RyuTunnelsDTO: ...
    @staticmethod
    def ryu_tunnel_dto_to_dict(ryu_tunnel_dto: cluster_manager_pb2.RyuTunnelDTO) -> Dict[str, Any]: ...
    @staticmethod
    def ryu_tunnels_dto_to_dict(ryu_tunnels_dto: cluster_manager_pb2.RyuTunnelsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def create_kibana_tunnel(execution: EmulationExecution, logger: logging.Logger) -> int: ...
    @staticmethod
    def remove_kibana_tunnel(execution: EmulationExecution) -> None: ...
    @staticmethod
    def create_ryu_tunnel(execution: EmulationExecution, logger: logging.Logger) -> int: ...
    @staticmethod
    def remove_ryu_tunnel(execution: EmulationExecution) -> None: ...
    @staticmethod
    def create_kibana_tunnels_dto_from_dict(dict: Dict[str, Any]) -> cluster_manager_pb2.KibanaTunnelsDTO: ...
    @staticmethod
    def create_ryu_tunnels_dto_from_dict(dict: Dict[str, Any]) -> cluster_manager_pb2.RyuTunnelsDTO: ...
    @staticmethod
    def merge_execution_infos(execution_infos: List[cluster_manager_pb2.ExecutionInfoDTO]) -> EmulationExecutionInfo: ...
    @staticmethod
    def get_container_config(execution: EmulationExecution, ip: str) -> Union[NodeContainerConfig, None]: ...
    @staticmethod
    def get_logs(execution: EmulationExecution, ip: str, path: str) -> cluster_manager_pb2.LogsDTO: ...
    @staticmethod
    def tail(f, window: int = ...) -> str: ...
    @staticmethod
    def convert_client_population_metrics_dto(client_population_metrics: ClientPopulationMetrics) -> cluster_manager_pb2.ClientPopulationMetricsDTO: ...
    @staticmethod
    def convert_client_population_metrics_dto_reverse(client_population_metrics_dto: cluster_manager_pb2.ClientPopulationMetricsDTO) -> ClientPopulationMetrics: ...
    @staticmethod
    def get_empty_client_population_metrics_dto() -> cluster_manager_pb2.ClientPopulationMetricsDTO: ...
    @staticmethod
    def client_population_metrics_dto_to_dict(client_population_metrics_dto: cluster_manager_pb2.ClientPopulationMetricsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_docker_stats_dto(docker_stats: DockerStats) -> cluster_manager_pb2.DockerStatsDTO: ...
    @staticmethod
    def convert_docker_stats_dto_reverse(docker_stats_dto: cluster_manager_pb2.DockerStatsDTO) -> DockerStats: ...
    @staticmethod
    def get_empty_docker_stats_dto() -> cluster_manager_pb2.DockerStatsDTO: ...
    @staticmethod
    def docker_stats_dto_to_dict(docker_stats_dto: cluster_manager_pb2.DockerStatsDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_host_metrics_dto(host_metrics: HostMetrics) -> cluster_manager_pb2.HostMetricsDataDTO: ...
    @staticmethod
    def convert_host_metrics_dto_reverse(host_metrics_dto: cluster_manager_pb2.HostMetricsDataDTO) -> HostMetrics: ...
    @staticmethod
    def get_empty_host_metrics_dto() -> cluster_manager_pb2.HostMetricsDataDTO: ...
    @staticmethod
    def host_metrics_dto_to_dict(host_metrics_dto: cluster_manager_pb2.HostMetricsDataDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_emulation_defender_action_dto(emulation_defender_action: EmulationDefenderAction) -> cluster_manager_pb2.EmulationDefenderActionDTO: ...
    @staticmethod
    def convert_emulation_defender_action_dto_reverse(emulation_defender_action_dto: cluster_manager_pb2.EmulationDefenderActionDTO) -> EmulationDefenderAction: ...
    @staticmethod
    def get_empty_emulation_defender_action_dto() -> cluster_manager_pb2.EmulationDefenderActionDTO: ...
    @staticmethod
    def emulation_defender_action_dto_to_dict(emulation_defender_action_dto: cluster_manager_pb2.EmulationDefenderActionDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_emulation_attacker_action_dto(emulation_attacker_action: EmulationAttackerAction) -> cluster_manager_pb2.EmulationAttackerActionDTO: ...
    @staticmethod
    def convert_emulation_attacker_action_dto_reverse(emulation_attacker_action_dto: cluster_manager_pb2.EmulationAttackerActionDTO) -> EmulationAttackerAction: ...
    @staticmethod
    def get_empty_emulation_attacker_action_dto() -> cluster_manager_pb2.EmulationAttackerActionDTO: ...
    @staticmethod
    def emulation_attacker_action_dto_to_dict(emulation_attacker_action_dto: cluster_manager_pb2.EmulationAttackerActionDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_alert_counters_dto(snort_ids_alert_counters: SnortIdsAlertCounters) -> cluster_manager_pb2.SnortIdsAlertCountersDTO: ...
    @staticmethod
    def convert_snort_ids_alert_counters_dto_reverse(snort_ids_alert_counters_dto: cluster_manager_pb2.SnortIdsAlertCountersDTO) -> SnortIdsAlertCounters: ...
    @staticmethod
    def get_empty_snort_ids_alert_counters_dto() -> cluster_manager_pb2.SnortIdsAlertCountersDTO: ...
    @staticmethod
    def snort_ids_alert_counters_dto_to_dict(snort_ids_alert_counters_dto: cluster_manager_pb2.SnortIdsAlertCountersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_rule_counters_dto(snort_ids_rule_counters: SnortIdsRuleCounters) -> cluster_manager_pb2.SnortIdsRuleCountersDTO: ...
    @staticmethod
    def convert_snort_ids_rule_counters_dto_reverse(snort_ids_rule_counters_dto: cluster_manager_pb2.SnortIdsRuleCountersDTO) -> SnortIdsRuleCounters: ...
    @staticmethod
    def get_empty_snort_ids_rule_counters_dto() -> cluster_manager_pb2.SnortIdsRuleCountersDTO: ...
    @staticmethod
    def snort_ids_rule_counters_dto_to_dict(snort_ids_rule_counters_dto: cluster_manager_pb2.SnortIdsRuleCountersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_ip_alert_counters_dto(snort_ids_ip_alert_counters: SnortIdsIPAlertCounters) -> cluster_manager_pb2.SnortIdsIpAlertCountersDTO: ...
    @staticmethod
    def convert_snort_ids_ip_alert_counters_dto_reverse(snort_ids_ip_alert_counters_dto: cluster_manager_pb2.SnortIdsIpAlertCountersDTO) -> SnortIdsIPAlertCounters: ...
    @staticmethod
    def get_empty_snort_ids_ip_alert_counters_dto() -> cluster_manager_pb2.SnortIdsIpAlertCountersDTO: ...
    @staticmethod
    def snort_ids_ip_alert_counters_dto_to_dict(snort_ids_alert_counters_dto: cluster_manager_pb2.SnortIdsIpAlertCountersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_ossec_ids_alert_counters_dto(ossec_ids_alert_counters: OSSECIdsAlertCounters) -> cluster_manager_pb2.OSSECIdsAlertCountersDTO: ...
    @staticmethod
    def convert_ossec_ids_alert_counters_dto_reverse(ossec_ids_alert_counters_dto: cluster_manager_pb2.OSSECIdsAlertCountersDTO) -> OSSECIdsAlertCounters: ...
    @staticmethod
    def get_empty_ossec_ids_alert_counters_dto() -> cluster_manager_pb2.OSSECIdsAlertCountersDTO: ...
    @staticmethod
    def ossec_ids_alert_counters_dto_to_dict(ossec_ids_alert_counters_dto: cluster_manager_pb2.OSSECIdsAlertCountersDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_flow_statistics_dto(flow_statistic: FlowStatistic) -> cluster_manager_pb2.FlowStatisticDTO: ...
    @staticmethod
    def convert_flow_statistic_dto_reverse(flow_statistic_dto: cluster_manager_pb2.FlowStatisticDTO) -> FlowStatistic: ...
    @staticmethod
    def get_empty_flow_statistic_dto() -> cluster_manager_pb2.FlowStatisticDTO: ...
    @staticmethod
    def flow_statistic_dto_to_dict(flow_statistic_dto: cluster_manager_pb2.FlowStatisticDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_port_statistics_dto(port_statistic: PortStatistic) -> cluster_manager_pb2.PortStatisticDTO: ...
    @staticmethod
    def convert_port_statistic_dto_reverse(port_statistic_dto: cluster_manager_pb2.PortStatisticDTO) -> PortStatistic: ...
    @staticmethod
    def get_empty_port_statistic_dto() -> cluster_manager_pb2.PortStatisticDTO: ...
    @staticmethod
    def port_statistic_dto_to_dict(port_statistic_dto: cluster_manager_pb2.PortStatisticDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_agg_flow_statistic_dto(agg_flow_statistic: AggFlowStatistic) -> cluster_manager_pb2.AggFlowStatisticDTO: ...
    @staticmethod
    def convert_agg_flow_statistic_dto_reverse(agg_flow_statistic_dto: cluster_manager_pb2.AggFlowStatisticDTO) -> AggFlowStatistic: ...
    @staticmethod
    def get_empty_agg_flow_statistic_dto() -> cluster_manager_pb2.AggFlowStatisticDTO: ...
    @staticmethod
    def agg_flow_statistic_dto_to_dict(agg_flow_statistic_dto: cluster_manager_pb2.AggFlowStatisticDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_avg_flow_statistic_dto(avg_flow_statistic: AvgFlowStatistic) -> cluster_manager_pb2.AvgFlowStatisticDTO: ...
    @staticmethod
    def convert_avg_flow_statistic_dto_reverse(avg_flow_statistic_dto: cluster_manager_pb2.AvgFlowStatisticDTO) -> AvgFlowStatistic: ...
    @staticmethod
    def get_empty_avg_flow_statistic_dto() -> cluster_manager_pb2.AvgFlowStatisticDTO: ...
    @staticmethod
    def avg_flow_statistic_dto_to_dict(avg_flow_statistic_dto: cluster_manager_pb2.AvgFlowStatisticDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_avg_port_statistic_dto(avg_port_statistic: AvgPortStatistic) -> cluster_manager_pb2.AvgPortStatisticDTO: ...
    @staticmethod
    def convert_avg_port_statistic_dto_reverse(avg_port_statistic_dto: cluster_manager_pb2.AvgPortStatisticDTO) -> AvgPortStatistic: ...
    @staticmethod
    def get_empty_avg_port_statistic_dto() -> cluster_manager_pb2.AvgPortStatisticDTO: ...
    @staticmethod
    def avg_port_statistic_dto_to_dict(avg_port_statistic_dto: cluster_manager_pb2.AvgPortStatisticDTO) -> Dict[str, Any]: ...
    @staticmethod
    def convert_docker_stats_dict(docker_stats_d: Dict[str, List[DockerStats]]) -> List[cluster_manager_pb2.DockerStatsDict]: ...
    @staticmethod
    def convert_docker_stats_dict_reverse(docker_stats_dict: List[cluster_manager_pb2.DockerStatsDict]) -> Dict[str, List[DockerStats]]: ...
    @staticmethod
    def get_empty_docker_stats_dict() -> List[cluster_manager_pb2.DockerStatsDict]: ...
    @staticmethod
    def docker_stats_dict_to_dict(docker_stats_dict: cluster_manager_pb2.DockerStatsDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_ip_alert_counters_dict(snort_ids_ip_alert_counters_d: Dict[str, List[SnortIdsIPAlertCounters]]) -> List[cluster_manager_pb2.SnortIdsIpAlertCountersDict]: ...
    @staticmethod
    def convert_snort_ids_ip_alert_counters_dict_reverse(snort_ids_ip_alerts_counters_dict: List[cluster_manager_pb2.SnortIdsIpAlertCountersDict]) -> Dict[str, List[SnortIdsIPAlertCounters]]: ...
    @staticmethod
    def get_empty_snort_ids_ip_alert_counters_dict() -> List[cluster_manager_pb2.SnortIdsIpAlertCountersDict]: ...
    @staticmethod
    def snort_ids_ip_alert_counters_dict_to_dict(snort_ids_ip_alert_counters_dict: cluster_manager_pb2.SnortIdsIpAlertCountersDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_alert_counters_dict(snort_ids_alert_counters_d: Dict[str, List[SnortIdsAlertCounters]]) -> List[cluster_manager_pb2.SnortIdsAlertCountersDict]: ...
    @staticmethod
    def convert_snort_ids_alert_counters_dict_reverse(snort_ids_alerts_counters_dict: List[cluster_manager_pb2.SnortIdsAlertCountersDict]) -> Dict[str, List[SnortIdsAlertCounters]]: ...
    @staticmethod
    def get_empty_snort_ids_alert_counters_dict() -> List[cluster_manager_pb2.SnortIdsAlertCountersDict]: ...
    @staticmethod
    def snort_ids_alert_counters_dict_to_dict(snort_ids_alert_counters_dict: cluster_manager_pb2.SnortIdsAlertCountersDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_snort_ids_rule_counters_dict(snort_ids_rule_counters_d: Dict[str, List[SnortIdsRuleCounters]]) -> List[cluster_manager_pb2.SnortIdsRuleCountersDict]: ...
    @staticmethod
    def convert_snort_ids_rule_counters_dict_reverse(snort_ids_rule_counters_dict: List[cluster_manager_pb2.SnortIdsRuleCountersDict]) -> Dict[str, List[SnortIdsRuleCounters]]: ...
    @staticmethod
    def get_empty_snort_ids_rule_counters_dict() -> List[cluster_manager_pb2.SnortIdsRuleCountersDict]: ...
    @staticmethod
    def snort_ids_rule_counters_dict_to_dict(snort_ids_rule_counters_dict: cluster_manager_pb2.SnortIdsAlertCountersDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_host_metrics_dict(host_metrics_dict: Dict[str, List[HostMetrics]]) -> List[cluster_manager_pb2.HostMetricsDict]: ...
    @staticmethod
    def convert_host_metrics_dict_reverse(host_metrics_dict: List[cluster_manager_pb2.HostMetricsDict]) -> Dict[str, List[HostMetrics]]: ...
    @staticmethod
    def get_empty_host_metrics_dict() -> List[cluster_manager_pb2.HostMetricsDict]: ...
    @staticmethod
    def host_metrics_dict_to_dict(host_metrics_dict: cluster_manager_pb2.HostMetricsDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_ossec_ids_alert_counters_dict(ossec_ids_alert_counters_dict: Dict[str, List[OSSECIdsAlertCounters]]) -> List[cluster_manager_pb2.OSSECIdsAlertCountersDict]: ...
    @staticmethod
    def convert_ossec_ids_alert_counters_dict_reverse(ossec_ids_alert_counters_dict: List[cluster_manager_pb2.OSSECIdsAlertCountersDict]) -> Dict[str, List[OSSECIdsAlertCounters]]: ...
    @staticmethod
    def get_empty_ossec_ids_alert_counters_dict() -> List[cluster_manager_pb2.OSSECIdsAlertCountersDict]: ...
    @staticmethod
    def ossec_ids_alert_counters_dict_to_dict(ossec_ids_alert_counters_dict: cluster_manager_pb2.OSSECIdsAlertCountersDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_flow_statistic_dict(flow_statistic_dict: Dict[str, List[FlowStatistic]]) -> List[cluster_manager_pb2.FlowStatisticDict]: ...
    @staticmethod
    def convert_flow_statistic_dict_reverse(flow_statistics_dict: List[cluster_manager_pb2.FlowStatisticDict]) -> Dict[str, List[FlowStatistic]]: ...
    @staticmethod
    def get_empty_flow_statistic_dict() -> List[cluster_manager_pb2.FlowStatisticDict]: ...
    @staticmethod
    def flow_statistics_dict_to_dict(flow_statistics_dict: cluster_manager_pb2.FlowStatisticDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_port_statistic_dict(port_statistic_dict: Dict[str, List[PortStatistic]]) -> List[cluster_manager_pb2.PortStatisticDict]: ...
    @staticmethod
    def convert_port_statistic_dict_reverse(port_statistics_dict: List[cluster_manager_pb2.PortStatisticDict]) -> Dict[str, List[PortStatistic]]: ...
    @staticmethod
    def get_empty_port_statistic_dict() -> List[cluster_manager_pb2.PortStatisticDict]: ...
    @staticmethod
    def port_statistics_dict_to_dict(port_statistics_dict: cluster_manager_pb2.PortStatisticDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_avg_flow_statistic_dict(avg_flow_statistic_dict: Dict[str, List[AvgFlowStatistic]]) -> List[cluster_manager_pb2.AvgFlowStatisticDict]: ...
    @staticmethod
    def convert_avg_flow_statistic_dict_reverse(avg_flow_statistics_dict: List[cluster_manager_pb2.AvgFlowStatisticDict]) -> Dict[str, List[AvgFlowStatistic]]: ...
    @staticmethod
    def get_empty_avg_flow_statistic_dict() -> List[cluster_manager_pb2.AvgFlowStatisticDict]: ...
    @staticmethod
    def avg_flow_statistics_dict_to_dict(avg_flow_statistics_dict: cluster_manager_pb2.AvgFlowStatisticDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_agg_flow_statistic_dict(agg_flow_statistic_dict: Dict[str, List[AggFlowStatistic]]) -> List[cluster_manager_pb2.AggFlowStatisticDict]: ...
    @staticmethod
    def convert_agg_flow_statistic_dict_reverse(agg_flow_statistics_dict: List[cluster_manager_pb2.AggFlowStatisticDict]) -> Dict[str, List[AggFlowStatistic]]: ...
    @staticmethod
    def get_empty_agg_flow_statistic_dict() -> List[cluster_manager_pb2.AggFlowStatisticDict]: ...
    @staticmethod
    def agg_flow_statistics_dict_to_dict(agg_flow_statistics_dict: cluster_manager_pb2.AggFlowStatisticDict) -> Dict[str, Any]: ...
    @staticmethod
    def convert_avg_port_statistic_dict(avg_port_statistic_dict: Dict[str, List[AvgPortStatistic]]) -> List[cluster_manager_pb2.AvgPortStatisticDict]: ...
    @staticmethod
    def convert_avg_port_statistic_dict_reverse(avg_port_statistics_dict: List[cluster_manager_pb2.AvgPortStatisticDict]) -> Dict[str, List[AvgPortStatistic]]: ...
    @staticmethod
    def get_empty_avg_port_statistic_dict() -> List[cluster_manager_pb2.AvgPortStatisticDict]: ...
    @staticmethod
    def avg_port_statistics_dict_to_dict(avg_port_statistics_dict: cluster_manager_pb2.AvgPortStatisticDict) -> Dict[str, Any]: ...
    @staticmethod
    def get_empty_emulation_metrics_time_series_dto() -> cluster_manager_pb2.EmulationMetricsTimeSeriesDTO: ...
    @staticmethod
    def convert_emulation_metrics_time_series_dto(time_series_dto: EmulationMetricsTimeSeries) -> cluster_manager_pb2.EmulationMetricsTimeSeriesDTO: ...
    @staticmethod
    def convert_emulation_metrics_time_series_dto_reverse(time_series_dto: cluster_manager_pb2.EmulationMetricsTimeSeriesDTO) -> EmulationMetricsTimeSeries: ...
    @staticmethod
    def emulation_metrics_time_series_dto_to_dict(time_series_dto: cluster_manager_pb2.EmulationMetricsTimeSeriesDTO) -> Dict[str, Any]: ...
