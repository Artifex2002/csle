import csle_cluster.cluster_manager.cluster_manager_pb2
import grpc
from csle_cluster.cluster_manager.cluster_manager_util import ClusterManagerUtil as ClusterManagerUtil

class ClusterManagerServicer(csle_cluster.cluster_manager.cluster_manager_pb2_grpc.ClusterManagerServicer):
    def __init__(self) -> None: ...
    def getNodeStatus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetNodeStatusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.NodeStatusDTO: ...
    def startPosgtreSQL(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartPostgreSQLMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopPostgreSQL(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPostgreSQLMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startDockerEngine(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartDockerEngineMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopDockerEngine(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopDockerEngineMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startNginx(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartNginxMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopNginx(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopNginxMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startCAdvisor(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartCAdvisorMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopCAdvisor(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopCAdvisorMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startNodeExporter(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartNodeExporterMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopNodeExporter(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopNodeExporterMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startGrafana(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartGrafanaMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopGrafana(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopGrafanaMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startPrometheus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartPrometheusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopPrometheus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPrometheusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startPgAdmin(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartPgAdminMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopPgAdmin(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPgAdminMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startFlask(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartFlaskMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopFlask(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopFlaskMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def startDockerStatsManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartDockerStatsManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def stopDockerStatsManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopDockerStatsManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ServiceStatusDTO: ...
    def getLogFile(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetLogFileMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getFlaskLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetFlaskLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getPostrgreSQLLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetPostgreSQLLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getDockerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetDockerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getNginxLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetNginxLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getGrafanaLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetGrafanaLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getPgAdminLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetPgAdminLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getCadvisorLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetCAdvisorLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getNodeExporterLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetNodeExporterLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getPrometheusLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetPrometheusLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getDockerStatsManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetDockerStatsManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getCsleLogFiles(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetCsleLogFilesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def startContainersInExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartContainersInExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def attachContainersInExecutionToNetworks(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartContainersInExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def installLibraries(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.InstallLibrariesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyKafkaConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyKafkaConfigMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSdnController(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSdnControllerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyResourceConstraints(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyResouceConstraintsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createOvsSwitches(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateOvsSwitchesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def pingExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.PingExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def configureOvs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ConfigureOvsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSdnControllerMonitor(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSdnControllerMonitorMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createUsers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateUsersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createVulnerabilities(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateVulnsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createFlags(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateFlagsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createTopology(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateTopologyMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startTrafficManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartTrafficManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startTrafficGenerators(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartTrafficGeneratorsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startClientPopulation(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartClientPopulationMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startKafkaClientProducer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartKafkaClientProducerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopKafkaClientProducer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopKafkaClientProducerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdsesMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsesMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOssecIdses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIdsesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOssecIdsesMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIdsesMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startElkStack(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartElkStackMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHostManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHostManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyFileBeatsConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyFileBeatConfigsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyPacketBeatsConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyPacketBeatConfigsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyMetricBeatsConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyMetricBeatConfigsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyHeartBeatsConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyHeartBeatConfigsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startFilebeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartFileBeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startPacketbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartPacketBeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startMetricbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartMetricBeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHeartbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHeartBeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startDockerStatsManagerThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartDockerStatsManagerThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopAllExecutionsOfEmulation(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopAllExecutionsOfEmulationMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopAllExecutions(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopAllExecutionsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def cleanAllExecutions(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CleanAllExecutionsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def cleanAllExecutionsOfEmulation(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CleanAllExecutionsOfEmulationMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def cleanExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CleanExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startTrafficManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartTrafficManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopTrafficManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopTrafficManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopTrafficManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopTrafficManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startClientManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartClientManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopClientManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopClientManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopClientPopulation(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopClientPopulationMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getNumActiveClients(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetNumActiveClientsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.GetNumActiveClientsMsg: ...
    def stopTrafficGenerators(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopTrafficGeneratorsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startTrafficGenerator(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartTrafficGeneratorMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopTrafficGenerator(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopTrafficGeneratorMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getClientManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetClientManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ClientManagersInfoDTO: ...
    def getTrafficManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetTrafficManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.TrafficManagersInfoDTO: ...
    def stopAllRunningContainers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopAllRunningContainersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopContainer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopContainerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeAllStoppedContainers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveAllStoppedContainersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeContainer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveContainerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeAllContainerImages(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveAllContainerImagesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeContainerImage(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveContainerImageMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def listAllContainerImages(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListAllContainerImagesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ContainerImagesDTO: ...
    def listAllDockerNetworks(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListAllDockerNetworksMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerNetworksDTO: ...
    def startAllStoppedContainers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartAllStoppedContainersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startContainer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartContainerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def listAllRunningContainers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListAllRunningContainersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.RunningContainersDTO: ...
    def listAllRunningEmulations(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListAllRunningEmulationsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.RunningEmulationsDTO: ...
    def listAllStoppedContainers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListAllStoppedContainersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.StoppedContainersDTO: ...
    def createEmulationNetworks(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateEmulationNetworksMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopDockerStatsManagerThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopDockerStatsManagerThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getDockerStatsManagerStatus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetDockerStatsManagerStatusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerStatsMonitorStatusDTO: ...
    def removeDockerNetworks(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveDockerNetworksMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeAllDockerNetworks(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveAllDockerNetworksMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getDockerStatsManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetDockerStatsManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.DockerStatsManagersInfoDTO: ...
    def stopElkManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopElkManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startElkManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartElkManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getElkStatus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetElkStackStatusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ElkStatusDTO: ...
    def stopElkStack(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopElkStackMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startElastic(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartElasticServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopElastic(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopElasticServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startKibana(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartKibanaServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopKibana(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopKibanaServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startLogstash(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartLogstashServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopLogstash(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopLogstashServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getElkManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetElkManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ElkManagersInfoDTO: ...
    def startContainersOfExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartContainersOfExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def runContainer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RunContainerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopContainersOfExecution(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopContainersOfExecutionMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHostManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHostManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHostManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHostManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHostManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHostManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHostMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHostMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopFilebeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopFilebeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopPacketbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPacketbeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopMetricbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopMetricbeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHeartbeats(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHeartbeatsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHostMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHostMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startFilebeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartFileBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startPacketbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartPacketBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startMetricbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartMetricBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startHeartbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartHeartBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopFilebeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopFileBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopPacketbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPacketBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopMetricbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopMetricBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHeartbeat(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHeartBeatMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyFileBeatConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyFileBeatConfigMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyPacketBeatConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyPacketBeatConfigMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyMetricBeatConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyMetricBeatConfigMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def applyHeartBeatConfig(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ApplyHeartBeatConfigMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getHostMonitorThreadsStatuses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetHostMonitorThreadsStatusesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.HostManagerStatusesDTO: ...
    def getHostManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetHostManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.HostManagersInfoDTO: ...
    def stopKafkaManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopKafkaManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startKafkaManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartKafkaManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createKafkaTopics(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateKafkaTopicsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getKafkaStatus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetKafkaManagerStatusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.KafkaStatusDTO: ...
    def stopKafkaServer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopKafkaServerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startKafkaServer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartKafkaServerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getKafkaManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetKafkaManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.KafkaManagersInfoDTO: ...
    def stopOSSECIDSes(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOSSECIDSes(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIDSesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopOSSECIDS(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOSSECIDS(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIDSMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOSSECIDSManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIDSManagers, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopOSSECIDSManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSManagers, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOSSECIDSManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIDSManager, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopOSSECIDSManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSManager, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startOSSECIDSMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartOSSECIDSMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopOSSECIDSMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopOSSECIDSMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopOSSECIDSMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getOSSECIDSMonitorThreadStatuses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetOSSECIDSMonitorThreadStatusesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OSSECIdsMonitorThreadStatusesDTO: ...
    def getOSSECIdsManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetOSSECIDSManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OSSECIdsManagersInfoDTO: ...
    def startRyuManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartRyuManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopRyuManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopRyuManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getRyuStatus(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetRyuServiceStatusMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuManagerStatusDTO: ...
    def startRyu(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartRyuServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopRyu(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopRyuServiceMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getRyuManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetRyuManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuManagersInfoDTO: ...
    def stopSnortIdses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getSnortIdsMonitorThreadStatuses(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetSnortIdsMonitorThreadStatusesMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.SnortIdsMonitorThreadStatusesDTO: ...
    def stopSnortIdsesMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsesMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSnortIds(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSnortIdsMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIds(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdsMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdsMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdsManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSnortIdsManagers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsManagersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSnortIdsManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSnortIdsManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSnortIdsManager(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsManagerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSnortIdsMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSnortIdsMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getSnortIdsManagersInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetSnortIdsManagersInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.SnortIdsManagersInfoDTO: ...
    def getExecutionInfo(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetExecutionInfoMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.ExecutionInfoDTO: ...
    def listKibanaTunnels(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListKibanaTunnelsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.KibanaTunnelsDTO: ...
    def listRyuTunnels(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.ListRyuTunnelsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.RyuTunnelsDTO: ...
    def createKibanaTunnel(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateKibanaTunnelMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def createRyuTunnel(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CreateRyuTunnelMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeRyuTunnel(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveRyuTunnelMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def removeKibanaTunnel(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.RemoveKibanaTunnelMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHostMonitorThreads(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHostMonitorThreadsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopHostMonitorThread(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopHostMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startRyuMonitor(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartRyuMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopRyuMonitor(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopRyuMonitorThreadMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def getRyuManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetRyuManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getRyuControllerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetRyuControllerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getElkLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetElkLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getElkManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetElkManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getTrafficManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetTrafficManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getHostManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetHostManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getOSSECIdsLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetOSSECIdsLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getOSSECIdsManagerLogsMsg(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetOSSECIdsManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getSnortIdsLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetSnortIdsLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getSnortIdsManagerLogsMsg(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetSnortIdsManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getKafkaLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetKafkaLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getKafkaManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetKafkaManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getClientManagerLogsMsg(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetClientManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getContainerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetContainerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getClusterManagerLogs(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetClusterManagerLogsMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.LogsDTO: ...
    def getExecutionTimeSeriesData(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.GetExecutionTimeSeriesDataMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.EmulationMetricsTimeSeriesDTO: ...
    def startSparkServer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSparkServerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSparkServer(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSparkServerMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def startSparkServers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StartSparkServersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopSparkServers(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopSparkServersMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def checkPid(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.CheckPidMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...
    def stopPid(self, request: csle_cluster.cluster_manager.cluster_manager_pb2.StopPidMsg, context: grpc.ServicerContext) -> csle_cluster.cluster_manager.cluster_manager_pb2.OperationOutcomeDTO: ...

def serve(port: int = ..., log_dir: str = ..., max_workers: int = ..., log_file_name: str = ...) -> None: ...
