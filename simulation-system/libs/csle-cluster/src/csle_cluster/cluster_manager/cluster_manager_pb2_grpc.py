# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_cluster.cluster_manager.cluster_manager_pb2 as cluster__manager__pb2


class ClusterManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNodeStatus = channel.unary_unary(
                '/ClusterManager/getNodeStatus',
                request_serializer=cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.NodeStatusDTO.FromString,
                )
        self.startPostgreSQL = channel.unary_unary(
                '/ClusterManager/startPostgreSQL',
                request_serializer=cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startCAdvisor = channel.unary_unary(
                '/ClusterManager/startCAdvisor',
                request_serializer=cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNodeExporter = channel.unary_unary(
                '/ClusterManager/startNodeExporter',
                request_serializer=cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startGrafana = channel.unary_unary(
                '/ClusterManager/startGrafana',
                request_serializer=cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPrometheus = channel.unary_unary(
                '/ClusterManager/startPrometheus',
                request_serializer=cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPgAdmin = channel.unary_unary(
                '/ClusterManager/startPgAdmin',
                request_serializer=cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNginx = channel.unary_unary(
                '/ClusterManager/startNginx',
                request_serializer=cluster__manager__pb2.StartNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startFlask = channel.unary_unary(
                '/ClusterManager/startFlask',
                request_serializer=cluster__manager__pb2.StartFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerStatsManager = channel.unary_unary(
                '/ClusterManager/startDockerStatsManager',
                request_serializer=cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerEngine = channel.unary_unary(
                '/ClusterManager/startDockerEngine',
                request_serializer=cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPostgreSQL = channel.unary_unary(
                '/ClusterManager/stopPostgreSQL',
                request_serializer=cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopCAdvisor = channel.unary_unary(
                '/ClusterManager/stopCAdvisor',
                request_serializer=cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNodeExporter = channel.unary_unary(
                '/ClusterManager/stopNodeExporter',
                request_serializer=cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopGrafana = channel.unary_unary(
                '/ClusterManager/stopGrafana',
                request_serializer=cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPrometheus = channel.unary_unary(
                '/ClusterManager/stopPrometheus',
                request_serializer=cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPgAdmin = channel.unary_unary(
                '/ClusterManager/stopPgAdmin',
                request_serializer=cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNginx = channel.unary_unary(
                '/ClusterManager/stopNginx',
                request_serializer=cluster__manager__pb2.StopNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopFlask = channel.unary_unary(
                '/ClusterManager/stopFlask',
                request_serializer=cluster__manager__pb2.StopFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerStatsManager = channel.unary_unary(
                '/ClusterManager/stopDockerStatsManager',
                request_serializer=cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerEngine = channel.unary_unary(
                '/ClusterManager/stopDockerEngine',
                request_serializer=cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.getCsleLogFiles = channel.unary_unary(
                '/ClusterManager/getCsleLogFiles',
                request_serializer=cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerStatsManagerLogs = channel.unary_unary(
                '/ClusterManager/getDockerStatsManagerLogs',
                request_serializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPrometheusLogs = channel.unary_unary(
                '/ClusterManager/getPrometheusLogs',
                request_serializer=cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNodeExporterLogs = channel.unary_unary(
                '/ClusterManager/getNodeExporterLogs',
                request_serializer=cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getCadvisorLogs = channel.unary_unary(
                '/ClusterManager/getCadvisorLogs',
                request_serializer=cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPgAdminLogs = channel.unary_unary(
                '/ClusterManager/getPgAdminLogs',
                request_serializer=cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getGrafanaLogs = channel.unary_unary(
                '/ClusterManager/getGrafanaLogs',
                request_serializer=cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNginxLogs = channel.unary_unary(
                '/ClusterManager/getNginxLogs',
                request_serializer=cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerLogs = channel.unary_unary(
                '/ClusterManager/getDockerLogs',
                request_serializer=cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPostrgreSQLLogs = channel.unary_unary(
                '/ClusterManager/getPostrgreSQLLogs',
                request_serializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getFlaskLogs = channel.unary_unary(
                '/ClusterManager/getFlaskLogs',
                request_serializer=cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getLogFile = channel.unary_unary(
                '/ClusterManager/getLogFile',
                request_serializer=cluster__manager__pb2.GetLogFileMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )


class ClusterManagerServicer(object):
    """Interface exported by the server
    """

    def getNodeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCsleLogFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerStatsManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPrometheusLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeExporterLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCadvisorLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPgAdminLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGrafanaLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNginxLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPostrgreSQLLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFlaskLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNodeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeStatus,
                    request_deserializer=cluster__manager__pb2.GetNodeStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.NodeStatusDTO.SerializeToString,
            ),
            'startPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.startPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StartPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.startCAdvisor,
                    request_deserializer=cluster__manager__pb2.StartCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.startNodeExporter,
                    request_deserializer=cluster__manager__pb2.StartNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.startGrafana,
                    request_deserializer=cluster__manager__pb2.StartGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.startPrometheus,
                    request_deserializer=cluster__manager__pb2.StartPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.startPgAdmin,
                    request_deserializer=cluster__manager__pb2.StartPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.startNginx,
                    request_deserializer=cluster__manager__pb2.StartNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.startFlask,
                    request_deserializer=cluster__manager__pb2.StartFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StartDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerEngine,
                    request_deserializer=cluster__manager__pb2.StartDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StopPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopCAdvisor,
                    request_deserializer=cluster__manager__pb2.StopCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNodeExporter,
                    request_deserializer=cluster__manager__pb2.StopNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.stopGrafana,
                    request_deserializer=cluster__manager__pb2.StopGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPrometheus,
                    request_deserializer=cluster__manager__pb2.StopPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPgAdmin,
                    request_deserializer=cluster__manager__pb2.StopPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNginx,
                    request_deserializer=cluster__manager__pb2.StopNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFlask,
                    request_deserializer=cluster__manager__pb2.StopFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StopDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerEngine,
                    request_deserializer=cluster__manager__pb2.StopDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'getCsleLogFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.getCsleLogFiles,
                    request_deserializer=cluster__manager__pb2.GetCsleLogFilesMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerStatsManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerStatsManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPrometheusLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPrometheusLogs,
                    request_deserializer=cluster__manager__pb2.GetPrometheusLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNodeExporterLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeExporterLogs,
                    request_deserializer=cluster__manager__pb2.GetNodeExporterLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getCadvisorLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getCadvisorLogs,
                    request_deserializer=cluster__manager__pb2.GetCAdvisorLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPgAdminLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPgAdminLogs,
                    request_deserializer=cluster__manager__pb2.GetPgAdminLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getGrafanaLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getGrafanaLogs,
                    request_deserializer=cluster__manager__pb2.GetGrafanaLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNginxLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNginxLogs,
                    request_deserializer=cluster__manager__pb2.GetNginxLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPostrgreSQLLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPostrgreSQLLogs,
                    request_deserializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getFlaskLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getFlaskLogs,
                    request_deserializer=cluster__manager__pb2.GetFlaskLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getLogFile': grpc.unary_unary_rpc_method_handler(
                    servicer.getLogFile,
                    request_deserializer=cluster__manager__pb2.GetLogFileMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClusterManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getNodeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeStatus',
            cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
            cluster__manager__pb2.NodeStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPostgreSQL',
            cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startCAdvisor',
            cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNodeExporter',
            cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startGrafana',
            cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPrometheus',
            cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPgAdmin',
            cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNginx',
            cluster__manager__pb2.StartNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFlask',
            cluster__manager__pb2.StartFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerStatsManager',
            cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerEngine',
            cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPostgreSQL',
            cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopCAdvisor',
            cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNodeExporter',
            cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopGrafana',
            cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPrometheus',
            cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPgAdmin',
            cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNginx',
            cluster__manager__pb2.StopNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopFlask',
            cluster__manager__pb2.StopFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerStatsManager',
            cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerEngine',
            cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCsleLogFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCsleLogFiles',
            cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerStatsManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerStatsManagerLogs',
            cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPrometheusLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPrometheusLogs',
            cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNodeExporterLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeExporterLogs',
            cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCadvisorLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCadvisorLogs',
            cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPgAdminLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPgAdminLogs',
            cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGrafanaLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getGrafanaLogs',
            cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNginxLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNginxLogs',
            cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerLogs',
            cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPostrgreSQLLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPostrgreSQLLogs',
            cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFlaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getFlaskLogs',
            cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLogFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getLogFile',
            cluster__manager__pb2.GetLogFileMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
