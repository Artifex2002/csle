# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_cluster.cluster_manager.cluster_manager_pb2 as cluster__manager__pb2


class ClusterManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNodeStatus = channel.unary_unary(
                '/ClusterManager/getNodeStatus',
                request_serializer=cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.NodeStatusDTO.FromString,
                )
        self.startPostgreSQL = channel.unary_unary(
                '/ClusterManager/startPostgreSQL',
                request_serializer=cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startCAdvisor = channel.unary_unary(
                '/ClusterManager/startCAdvisor',
                request_serializer=cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNodeExporter = channel.unary_unary(
                '/ClusterManager/startNodeExporter',
                request_serializer=cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startGrafana = channel.unary_unary(
                '/ClusterManager/startGrafana',
                request_serializer=cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPrometheus = channel.unary_unary(
                '/ClusterManager/startPrometheus',
                request_serializer=cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startPgAdmin = channel.unary_unary(
                '/ClusterManager/startPgAdmin',
                request_serializer=cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startNginx = channel.unary_unary(
                '/ClusterManager/startNginx',
                request_serializer=cluster__manager__pb2.StartNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startFlask = channel.unary_unary(
                '/ClusterManager/startFlask',
                request_serializer=cluster__manager__pb2.StartFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerStatsManager = channel.unary_unary(
                '/ClusterManager/startDockerStatsManager',
                request_serializer=cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.startDockerEngine = channel.unary_unary(
                '/ClusterManager/startDockerEngine',
                request_serializer=cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPostgreSQL = channel.unary_unary(
                '/ClusterManager/stopPostgreSQL',
                request_serializer=cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopCAdvisor = channel.unary_unary(
                '/ClusterManager/stopCAdvisor',
                request_serializer=cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNodeExporter = channel.unary_unary(
                '/ClusterManager/stopNodeExporter',
                request_serializer=cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopGrafana = channel.unary_unary(
                '/ClusterManager/stopGrafana',
                request_serializer=cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPrometheus = channel.unary_unary(
                '/ClusterManager/stopPrometheus',
                request_serializer=cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopPgAdmin = channel.unary_unary(
                '/ClusterManager/stopPgAdmin',
                request_serializer=cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopNginx = channel.unary_unary(
                '/ClusterManager/stopNginx',
                request_serializer=cluster__manager__pb2.StopNginxMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopFlask = channel.unary_unary(
                '/ClusterManager/stopFlask',
                request_serializer=cluster__manager__pb2.StopFlaskMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerStatsManager = channel.unary_unary(
                '/ClusterManager/stopDockerStatsManager',
                request_serializer=cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.stopDockerEngine = channel.unary_unary(
                '/ClusterManager/stopDockerEngine',
                request_serializer=cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.ServiceStatusDTO.FromString,
                )
        self.getCsleLogFiles = channel.unary_unary(
                '/ClusterManager/getCsleLogFiles',
                request_serializer=cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerStatsManagerLogs = channel.unary_unary(
                '/ClusterManager/getDockerStatsManagerLogs',
                request_serializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPrometheusLogs = channel.unary_unary(
                '/ClusterManager/getPrometheusLogs',
                request_serializer=cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNodeExporterLogs = channel.unary_unary(
                '/ClusterManager/getNodeExporterLogs',
                request_serializer=cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getCadvisorLogs = channel.unary_unary(
                '/ClusterManager/getCadvisorLogs',
                request_serializer=cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPgAdminLogs = channel.unary_unary(
                '/ClusterManager/getPgAdminLogs',
                request_serializer=cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getGrafanaLogs = channel.unary_unary(
                '/ClusterManager/getGrafanaLogs',
                request_serializer=cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getNginxLogs = channel.unary_unary(
                '/ClusterManager/getNginxLogs',
                request_serializer=cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getDockerLogs = channel.unary_unary(
                '/ClusterManager/getDockerLogs',
                request_serializer=cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getPostrgreSQLLogs = channel.unary_unary(
                '/ClusterManager/getPostrgreSQLLogs',
                request_serializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getFlaskLogs = channel.unary_unary(
                '/ClusterManager/getFlaskLogs',
                request_serializer=cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.getLogFile = channel.unary_unary(
                '/ClusterManager/getLogFile',
                request_serializer=cluster__manager__pb2.GetLogFileMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.LogsDTO.FromString,
                )
        self.startContainersInExecution = channel.unary_unary(
                '/ClusterManager/startContainersInExecution',
                request_serializer=cluster__manager__pb2.StartContainersInExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.attachContainersInExecutionToNetworks = channel.unary_unary(
                '/ClusterManager/attachContainersInExecutionToNetworks',
                request_serializer=cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.installLibraries = channel.unary_unary(
                '/ClusterManager/installLibraries',
                request_serializer=cluster__manager__pb2.InstallLibrariesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyKafkaConfig = channel.unary_unary(
                '/ClusterManager/applyKafkaConfig',
                request_serializer=cluster__manager__pb2.ApplyKafkaConfigMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startRyu = channel.unary_unary(
                '/ClusterManager/startRyu',
                request_serializer=cluster__manager__pb2.StartRyuMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyResourceConstraints = channel.unary_unary(
                '/ClusterManager/applyResourceConstraints',
                request_serializer=cluster__manager__pb2.ApplyResouceConstraintsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createOvsSwitches = channel.unary_unary(
                '/ClusterManager/createOvsSwitches',
                request_serializer=cluster__manager__pb2.CreateOvsSwitchesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.pingExecution = channel.unary_unary(
                '/ClusterManager/pingExecution',
                request_serializer=cluster__manager__pb2.PingExecutionMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.configureOvs = channel.unary_unary(
                '/ClusterManager/configureOvs',
                request_serializer=cluster__manager__pb2.ConfigureOvsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSdnControllerMonitor = channel.unary_unary(
                '/ClusterManager/startSdnControllerMonitor',
                request_serializer=cluster__manager__pb2.StartSdnControllerMonitorMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createUsers = channel.unary_unary(
                '/ClusterManager/createUsers',
                request_serializer=cluster__manager__pb2.CreateUsersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createVulnerabilities = channel.unary_unary(
                '/ClusterManager/createVulnerabilities',
                request_serializer=cluster__manager__pb2.CreateVulnsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createFlags = channel.unary_unary(
                '/ClusterManager/createFlags',
                request_serializer=cluster__manager__pb2.CreateFlagsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.createTopology = channel.unary_unary(
                '/ClusterManager/createTopology',
                request_serializer=cluster__manager__pb2.CreateTopologyMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startTrafficManagers = channel.unary_unary(
                '/ClusterManager/startTrafficManagers',
                request_serializer=cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startTrafficGenerators = channel.unary_unary(
                '/ClusterManager/startTrafficGenerators',
                request_serializer=cluster__manager__pb2.StartTrafficGeneratorsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startClientPopulation = channel.unary_unary(
                '/ClusterManager/startClientPopulation',
                request_serializer=cluster__manager__pb2.StartClientPopulationMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startKafkaClientProducer = channel.unary_unary(
                '/ClusterManager/startKafkaClientProducer',
                request_serializer=cluster__manager__pb2.StartKafkaClientProducerMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startSnortIdses = channel.unary_unary(
                '/ClusterManager/startSnortIdses',
                request_serializer=cluster__manager__pb2.StartSnortIdsesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startOssecIdses = channel.unary_unary(
                '/ClusterManager/startOssecIdses',
                request_serializer=cluster__manager__pb2.StartOSSECIdsesMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startElkStack = channel.unary_unary(
                '/ClusterManager/startElkStack',
                request_serializer=cluster__manager__pb2.StartElkStackMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHostManagers = channel.unary_unary(
                '/ClusterManager/startHostManagers',
                request_serializer=cluster__manager__pb2.StartHostManagersMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyFileBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyFileBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyFileBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyPacketBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyPacketBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyPacketBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyMetricBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyMetricBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyMetricBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.applyHeartBeatsConfig = channel.unary_unary(
                '/ClusterManager/applyHeartBeatsConfig',
                request_serializer=cluster__manager__pb2.ApplyHeartBeatConfigsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startFilebeats = channel.unary_unary(
                '/ClusterManager/startFilebeats',
                request_serializer=cluster__manager__pb2.StartFileBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startPacketbeats = channel.unary_unary(
                '/ClusterManager/startPacketbeats',
                request_serializer=cluster__manager__pb2.StartPacketBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startMetricbeats = channel.unary_unary(
                '/ClusterManager/startMetricbeats',
                request_serializer=cluster__manager__pb2.StartMetricBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )
        self.startHeartbeats = channel.unary_unary(
                '/ClusterManager/startHeartbeats',
                request_serializer=cluster__manager__pb2.StartHeartBeatsMsg.SerializeToString,
                response_deserializer=cluster__manager__pb2.OperationOutcomeDTO.FromString,
                )


class ClusterManagerServicer(object):
    """Interface exported by the server
    """

    def getNodeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPostgreSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopCAdvisor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNodeExporter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopGrafana(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPrometheus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPgAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopNginx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopFlask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerStatsManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDockerEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCsleLogFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerStatsManagerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPrometheusLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeExporterLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCadvisorLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPgAdminLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGrafanaLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNginxLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDockerLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPostrgreSQLLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFlaskLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startContainersInExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attachContainersInExecutionToNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def installLibraries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyKafkaConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRyu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyResourceConstraints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createOvsSwitches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pingExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configureOvs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSdnControllerMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createVulnerabilities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficGenerators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startClientPopulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startKafkaClientProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSnortIdses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startOssecIdses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startElkStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostManagers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyFileBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyPacketBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyMetricBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyHeartBeatsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startFilebeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPacketbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startMetricbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHeartbeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNodeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeStatus,
                    request_deserializer=cluster__manager__pb2.GetNodeStatusMsg.FromString,
                    response_serializer=cluster__manager__pb2.NodeStatusDTO.SerializeToString,
            ),
            'startPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.startPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StartPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.startCAdvisor,
                    request_deserializer=cluster__manager__pb2.StartCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.startNodeExporter,
                    request_deserializer=cluster__manager__pb2.StartNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.startGrafana,
                    request_deserializer=cluster__manager__pb2.StartGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.startPrometheus,
                    request_deserializer=cluster__manager__pb2.StartPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.startPgAdmin,
                    request_deserializer=cluster__manager__pb2.StartPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.startNginx,
                    request_deserializer=cluster__manager__pb2.StartNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.startFlask,
                    request_deserializer=cluster__manager__pb2.StartFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StartDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'startDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.startDockerEngine,
                    request_deserializer=cluster__manager__pb2.StartDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPostgreSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPostgreSQL,
                    request_deserializer=cluster__manager__pb2.StopPostgreSQLMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopCAdvisor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopCAdvisor,
                    request_deserializer=cluster__manager__pb2.StopCAdvisorMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNodeExporter': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNodeExporter,
                    request_deserializer=cluster__manager__pb2.StopNodeExporterMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopGrafana': grpc.unary_unary_rpc_method_handler(
                    servicer.stopGrafana,
                    request_deserializer=cluster__manager__pb2.StopGrafanaMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPrometheus': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPrometheus,
                    request_deserializer=cluster__manager__pb2.StopPrometheusMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopPgAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPgAdmin,
                    request_deserializer=cluster__manager__pb2.StopPgAdminMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopNginx': grpc.unary_unary_rpc_method_handler(
                    servicer.stopNginx,
                    request_deserializer=cluster__manager__pb2.StopNginxMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopFlask': grpc.unary_unary_rpc_method_handler(
                    servicer.stopFlask,
                    request_deserializer=cluster__manager__pb2.StopFlaskMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerStatsManager': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerStatsManager,
                    request_deserializer=cluster__manager__pb2.StopDockerStatsManagerMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'stopDockerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDockerEngine,
                    request_deserializer=cluster__manager__pb2.StopDockerEngineMsg.FromString,
                    response_serializer=cluster__manager__pb2.ServiceStatusDTO.SerializeToString,
            ),
            'getCsleLogFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.getCsleLogFiles,
                    request_deserializer=cluster__manager__pb2.GetCsleLogFilesMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerStatsManagerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerStatsManagerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerStatsManagerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPrometheusLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPrometheusLogs,
                    request_deserializer=cluster__manager__pb2.GetPrometheusLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNodeExporterLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeExporterLogs,
                    request_deserializer=cluster__manager__pb2.GetNodeExporterLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getCadvisorLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getCadvisorLogs,
                    request_deserializer=cluster__manager__pb2.GetCAdvisorLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPgAdminLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPgAdminLogs,
                    request_deserializer=cluster__manager__pb2.GetPgAdminLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getGrafanaLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getGrafanaLogs,
                    request_deserializer=cluster__manager__pb2.GetGrafanaLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getNginxLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getNginxLogs,
                    request_deserializer=cluster__manager__pb2.GetNginxLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getDockerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getDockerLogs,
                    request_deserializer=cluster__manager__pb2.GetDockerLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getPostrgreSQLLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPostrgreSQLLogs,
                    request_deserializer=cluster__manager__pb2.GetPostgreSQLLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getFlaskLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.getFlaskLogs,
                    request_deserializer=cluster__manager__pb2.GetFlaskLogsMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'getLogFile': grpc.unary_unary_rpc_method_handler(
                    servicer.getLogFile,
                    request_deserializer=cluster__manager__pb2.GetLogFileMsg.FromString,
                    response_serializer=cluster__manager__pb2.LogsDTO.SerializeToString,
            ),
            'startContainersInExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startContainersInExecution,
                    request_deserializer=cluster__manager__pb2.StartContainersInExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'attachContainersInExecutionToNetworks': grpc.unary_unary_rpc_method_handler(
                    servicer.attachContainersInExecutionToNetworks,
                    request_deserializer=cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'installLibraries': grpc.unary_unary_rpc_method_handler(
                    servicer.installLibraries,
                    request_deserializer=cluster__manager__pb2.InstallLibrariesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyKafkaConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyKafkaConfig,
                    request_deserializer=cluster__manager__pb2.ApplyKafkaConfigMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startRyu': grpc.unary_unary_rpc_method_handler(
                    servicer.startRyu,
                    request_deserializer=cluster__manager__pb2.StartRyuMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyResourceConstraints': grpc.unary_unary_rpc_method_handler(
                    servicer.applyResourceConstraints,
                    request_deserializer=cluster__manager__pb2.ApplyResouceConstraintsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createOvsSwitches': grpc.unary_unary_rpc_method_handler(
                    servicer.createOvsSwitches,
                    request_deserializer=cluster__manager__pb2.CreateOvsSwitchesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'pingExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.pingExecution,
                    request_deserializer=cluster__manager__pb2.PingExecutionMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'configureOvs': grpc.unary_unary_rpc_method_handler(
                    servicer.configureOvs,
                    request_deserializer=cluster__manager__pb2.ConfigureOvsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSdnControllerMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startSdnControllerMonitor,
                    request_deserializer=cluster__manager__pb2.StartSdnControllerMonitorMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.createUsers,
                    request_deserializer=cluster__manager__pb2.CreateUsersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createVulnerabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.createVulnerabilities,
                    request_deserializer=cluster__manager__pb2.CreateVulnsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.createFlags,
                    request_deserializer=cluster__manager__pb2.CreateFlagsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'createTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.createTopology,
                    request_deserializer=cluster__manager__pb2.CreateTopologyMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startTrafficManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficManagers,
                    request_deserializer=cluster__manager__pb2.StartTrafficManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startTrafficGenerators': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficGenerators,
                    request_deserializer=cluster__manager__pb2.StartTrafficGeneratorsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startClientPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.startClientPopulation,
                    request_deserializer=cluster__manager__pb2.StartClientPopulationMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startKafkaClientProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.startKafkaClientProducer,
                    request_deserializer=cluster__manager__pb2.StartKafkaClientProducerMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startSnortIdses': grpc.unary_unary_rpc_method_handler(
                    servicer.startSnortIdses,
                    request_deserializer=cluster__manager__pb2.StartSnortIdsesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startOssecIdses': grpc.unary_unary_rpc_method_handler(
                    servicer.startOssecIdses,
                    request_deserializer=cluster__manager__pb2.StartOSSECIdsesMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startElkStack': grpc.unary_unary_rpc_method_handler(
                    servicer.startElkStack,
                    request_deserializer=cluster__manager__pb2.StartElkStackMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHostManagers': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostManagers,
                    request_deserializer=cluster__manager__pb2.StartHostManagersMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyFileBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyFileBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyFileBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyPacketBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyPacketBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyPacketBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyMetricBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyMetricBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyMetricBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'applyHeartBeatsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.applyHeartBeatsConfig,
                    request_deserializer=cluster__manager__pb2.ApplyHeartBeatConfigsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startFilebeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startFilebeats,
                    request_deserializer=cluster__manager__pb2.StartFileBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startPacketbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startPacketbeats,
                    request_deserializer=cluster__manager__pb2.StartPacketBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startMetricbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startMetricbeats,
                    request_deserializer=cluster__manager__pb2.StartMetricBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
            'startHeartbeats': grpc.unary_unary_rpc_method_handler(
                    servicer.startHeartbeats,
                    request_deserializer=cluster__manager__pb2.StartHeartBeatsMsg.FromString,
                    response_serializer=cluster__manager__pb2.OperationOutcomeDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClusterManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getNodeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeStatus',
            cluster__manager__pb2.GetNodeStatusMsg.SerializeToString,
            cluster__manager__pb2.NodeStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPostgreSQL',
            cluster__manager__pb2.StartPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startCAdvisor',
            cluster__manager__pb2.StartCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNodeExporter',
            cluster__manager__pb2.StartNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startGrafana',
            cluster__manager__pb2.StartGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPrometheus',
            cluster__manager__pb2.StartPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPgAdmin',
            cluster__manager__pb2.StartPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startNginx',
            cluster__manager__pb2.StartNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFlask',
            cluster__manager__pb2.StartFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerStatsManager',
            cluster__manager__pb2.StartDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startDockerEngine',
            cluster__manager__pb2.StartDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPostgreSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPostgreSQL',
            cluster__manager__pb2.StopPostgreSQLMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopCAdvisor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopCAdvisor',
            cluster__manager__pb2.StopCAdvisorMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNodeExporter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNodeExporter',
            cluster__manager__pb2.StopNodeExporterMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopGrafana(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopGrafana',
            cluster__manager__pb2.StopGrafanaMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPrometheus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPrometheus',
            cluster__manager__pb2.StopPrometheusMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPgAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopPgAdmin',
            cluster__manager__pb2.StopPgAdminMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopNginx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopNginx',
            cluster__manager__pb2.StopNginxMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopFlask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopFlask',
            cluster__manager__pb2.StopFlaskMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerStatsManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerStatsManager',
            cluster__manager__pb2.StopDockerStatsManagerMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDockerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/stopDockerEngine',
            cluster__manager__pb2.StopDockerEngineMsg.SerializeToString,
            cluster__manager__pb2.ServiceStatusDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCsleLogFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCsleLogFiles',
            cluster__manager__pb2.GetCsleLogFilesMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerStatsManagerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerStatsManagerLogs',
            cluster__manager__pb2.GetDockerStatsManagerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPrometheusLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPrometheusLogs',
            cluster__manager__pb2.GetPrometheusLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNodeExporterLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNodeExporterLogs',
            cluster__manager__pb2.GetNodeExporterLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCadvisorLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getCadvisorLogs',
            cluster__manager__pb2.GetCAdvisorLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPgAdminLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPgAdminLogs',
            cluster__manager__pb2.GetPgAdminLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGrafanaLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getGrafanaLogs',
            cluster__manager__pb2.GetGrafanaLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNginxLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getNginxLogs',
            cluster__manager__pb2.GetNginxLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDockerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getDockerLogs',
            cluster__manager__pb2.GetDockerLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPostrgreSQLLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getPostrgreSQLLogs',
            cluster__manager__pb2.GetPostgreSQLLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFlaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getFlaskLogs',
            cluster__manager__pb2.GetFlaskLogsMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLogFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/getLogFile',
            cluster__manager__pb2.GetLogFileMsg.SerializeToString,
            cluster__manager__pb2.LogsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startContainersInExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startContainersInExecution',
            cluster__manager__pb2.StartContainersInExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def attachContainersInExecutionToNetworks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/attachContainersInExecutionToNetworks',
            cluster__manager__pb2.AttachContainersToNetworksInExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def installLibraries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/installLibraries',
            cluster__manager__pb2.InstallLibrariesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyKafkaConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyKafkaConfig',
            cluster__manager__pb2.ApplyKafkaConfigMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRyu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startRyu',
            cluster__manager__pb2.StartRyuMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyResourceConstraints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyResourceConstraints',
            cluster__manager__pb2.ApplyResouceConstraintsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createOvsSwitches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createOvsSwitches',
            cluster__manager__pb2.CreateOvsSwitchesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pingExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/pingExecution',
            cluster__manager__pb2.PingExecutionMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configureOvs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/configureOvs',
            cluster__manager__pb2.ConfigureOvsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSdnControllerMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSdnControllerMonitor',
            cluster__manager__pb2.StartSdnControllerMonitorMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createUsers',
            cluster__manager__pb2.CreateUsersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createVulnerabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createVulnerabilities',
            cluster__manager__pb2.CreateVulnsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createFlags',
            cluster__manager__pb2.CreateFlagsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/createTopology',
            cluster__manager__pb2.CreateTopologyMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficManagers',
            cluster__manager__pb2.StartTrafficManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficGenerators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startTrafficGenerators',
            cluster__manager__pb2.StartTrafficGeneratorsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startClientPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startClientPopulation',
            cluster__manager__pb2.StartClientPopulationMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startKafkaClientProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startKafkaClientProducer',
            cluster__manager__pb2.StartKafkaClientProducerMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSnortIdses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startSnortIdses',
            cluster__manager__pb2.StartSnortIdsesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startOssecIdses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startOssecIdses',
            cluster__manager__pb2.StartOSSECIdsesMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startElkStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startElkStack',
            cluster__manager__pb2.StartElkStackMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostManagers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHostManagers',
            cluster__manager__pb2.StartHostManagersMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyFileBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyFileBeatsConfig',
            cluster__manager__pb2.ApplyFileBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyPacketBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyPacketBeatsConfig',
            cluster__manager__pb2.ApplyPacketBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyMetricBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyMetricBeatsConfig',
            cluster__manager__pb2.ApplyMetricBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyHeartBeatsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/applyHeartBeatsConfig',
            cluster__manager__pb2.ApplyHeartBeatConfigsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startFilebeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startFilebeats',
            cluster__manager__pb2.StartFileBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPacketbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startPacketbeats',
            cluster__manager__pb2.StartPacketBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startMetricbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startMetricbeats',
            cluster__manager__pb2.StartMetricBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHeartbeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterManager/startHeartbeats',
            cluster__manager__pb2.StartHeartBeatsMsg.SerializeToString,
            cluster__manager__pb2.OperationOutcomeDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
